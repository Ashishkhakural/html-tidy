!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.7	//
ACCESS_URL	libtidy/src/localize.c	26;"	d	file:
ARG_UNUSED	libtidy/src/access.c	/^static void FreeAccessibilityChecks( TidyDocImpl* ARG_UNUSED(doc) )$/;"	f	file:
ARG_UNUSED	libtidy/src/attrs.c	/^                  AttVal* ARG_UNUSED(attval))$/;"	f
ARG_UNUSED	libtidy/src/tidylib.c	/^Bool TIDY_CALL        tidyDetectedGenericXml( TidyDoc ARG_UNUSED(tdoc) )$/;"	f
ARG_UNUSED	libtidy/src/tidylib.c	/^Bool TIDY_CALL        tidyDetectedXhtml( TidyDoc ARG_UNUSED(tdoc) )$/;"	f
ARG_UNUSED	libtidy/src/tidylib.c	/^int TIDY_CALL        tidyDetectedHtmlVersion( TidyDoc ARG_UNUSED(tdoc) )$/;"	f
ATRC_ACCESS_URL	libtidy/src/localize.c	31;"	d	file:
AccessibilityCheckNode	libtidy/src/access.c	/^static void AccessibilityCheckNode( TidyDocImpl* doc, Node* node )$/;"	f	file:
AccessibilityChecks	libtidy/src/access.c	/^void TY_(AccessibilityChecks)( TidyDocImpl* doc )$/;"	f
AccessibilityHelloMessage	libtidy/src/localize.c	/^void TY_(AccessibilityHelloMessage)( TidyDocImpl* doc )$/;"	f
AccessibleCompatible	libtidy/src/access.c	/^static void AccessibleCompatible( TidyDocImpl* doc, Node* node )$/;"	f	file:
AddAlign	libtidy/src/clean.c	/^static void AddAlign( TidyDocImpl* doc, Node *node, ctmbstr align )$/;"	f	file:
AddAnchor	libtidy/src/attrs.c	/^static Anchor* AddAnchor( TidyDocImpl* doc, ctmbstr name, Node *node )$/;"	f	file:
AddAsciiString	libtidy/src/pprint.c	/^static uint AddAsciiString( TidyPrintImpl* pprint, ctmbstr str, uint string_index )$/;"	f	file:
AddAttrToList	libtidy/src/lexer.c	/^static void AddAttrToList( AttVal** list, AttVal* av )$/;"	f	file:
AddAttribute	libtidy/src/attrs.c	/^AttVal* TY_(AddAttribute)( TidyDocImpl* doc,$/;"	f
AddByte	libtidy/console/tab2space.c	/^static void AddByte(Stream *in, uint c)$/;"	f	file:
AddByte	libtidy/src/lexer.c	/^static void AddByte( Lexer *lexer, tmbchar ch )$/;"	f	file:
AddByteToOriginalText	libtidy/src/streamio.c	/^void TY_(AddByteToOriginalText)(StreamIn *in, tmbchar c)$/;"	f
AddC	libtidy/src/pprint.c	/^static void AddC( TidyPrintImpl* pprint, uint c, uint string_index)$/;"	f	file:
AddChar	libtidy/src/pprint.c	/^static uint AddChar( TidyPrintImpl* pprint, uint c )$/;"	f	file:
AddCharToLexer	libtidy/src/lexer.c	/^void TY_(AddCharToLexer)( Lexer *lexer, uint c )$/;"	f
AddCharToOriginalText	libtidy/src/streamio.c	/^void TY_(AddCharToOriginalText)(StreamIn *in, tchar c)$/;"	f
AddClass	libtidy/src/clean.c	/^static void AddClass( TidyDocImpl* doc, Node* node, ctmbstr classname )$/;"	f	file:
AddClassNoIndent	libtidy/src/parser.c	/^static void AddClassNoIndent( TidyDocImpl* doc, Node *node )$/;"	f	file:
AddColorRule	libtidy/src/clean.c	/^static void AddColorRule( Lexer* lexer, ctmbstr selector, ctmbstr color )$/;"	f	file:
AddFontColor	libtidy/src/clean.c	/^static void AddFontColor( TidyDocImpl* doc, Node *node, ctmbstr color)$/;"	f	file:
AddFontFace	libtidy/src/clean.c	/^static void AddFontFace( TidyDocImpl* doc, Node *node, ctmbstr face )$/;"	f	file:
AddFontSize	libtidy/src/clean.c	/^static void AddFontSize( TidyDocImpl* doc, Node* node, ctmbstr size )$/;"	f	file:
AddFontStyles	libtidy/src/clean.c	/^static void AddFontStyles( TidyDocImpl* doc, Node *node, AttVal *av)$/;"	f	file:
AddGenerator	libtidy/src/lexer.c	/^Bool TY_(AddGenerator)( TidyDocImpl* doc )$/;"	f
AddString	libtidy/src/pprint.c	/^static uint AddString( TidyPrintImpl* pprint, ctmbstr str )$/;"	f	file:
AddStringLiteral	libtidy/src/lexer.c	/^void TY_(AddStringLiteral)( Lexer* lexer, ctmbstr str )$/;"	f
AddStringToLexer	libtidy/src/lexer.c	/^static void AddStringToLexer( Lexer *lexer, ctmbstr str )$/;"	f	file:
AddStyleAsClass	libtidy/src/clean.c	/^void TY_(AddStyleAsClass)( TidyDocImpl* doc, Node *node, ctmbstr stylevalue )$/;"	f
AddStyleProperty	libtidy/src/clean.c	/^void TY_(AddStyleProperty)(TidyDocImpl* doc, Node *node, ctmbstr property )$/;"	f
AdjustCharEncoding	libtidy/src/config.c	/^Bool  TY_(AdjustCharEncoding)( TidyDocImpl* doc, int encoding )$/;"	f
AdjustConfig	libtidy/src/config.c	/^void AdjustConfig( TidyDocImpl* doc )$/;"	f
AdvanceChar	libtidy/src/config.c	/^static tchar AdvanceChar( TidyConfigImpl* config )$/;"	f	file:
AfterSpace	libtidy/src/pprint.c	/^static Bool AfterSpace(Lexer *lexer, Node *node)$/;"	f	file:
AfterSpaceImp	libtidy/src/pprint.c	/^static Bool AfterSpaceImp(Lexer *lexer, Node *node, Bool isEmpty)$/;"	f	file:
AllOption_t	libtidy/console/tidy.c	/^} AllOption_t;$/;"	t	typeref:struct:__anon9	file:
AlphaComparator	libtidy/src/attrs.c	/^int AlphaComparator(AttVal *one, AttVal *two)$/;"	f	file:
ApparentVersion	libtidy/src/lexer.c	/^uint TY_(ApparentVersion)( TidyDocImpl* doc )$/;"	f
AppendToClassAttr	libtidy/src/attrs.c	/^void TY_(AppendToClassAttr)( TidyDocImpl* doc, AttVal *classattr, ctmbstr classname )$/;"	f
AppendToStyleAttr	libtidy/src/attrs.c	/^static void AppendToStyleAttr( TidyDocImpl* doc, AttVal *styleattr, ctmbstr styleprop )$/;"	f	file:
AspToken	libtidy/src/lexer.c	1257;"	d	file:
AttrGetById	libtidy/src/attrs.c	/^AttVal* TY_(AttrGetById)( Node* node, TidyAttrId id )$/;"	f
AttrIndent	libtidy/src/pprint.c	/^static uint AttrIndent( TidyDocImpl* doc, Node* node, AttVal* ARG_UNUSED(attr) )$/;"	f	file:
AttrNoIndentFirst	libtidy/src/pprint.c	/^static Bool AttrNoIndentFirst( \/*TidyDocImpl* doc,*\/ Node* node, AttVal* attr )$/;"	f	file:
AttrValueIsAmong	libtidy/src/attrs.c	/^static Bool AttrValueIsAmong(AttVal *attval, ctmbstr const list[])$/;"	f	file:
AttributeChecks	libtidy/src/parser.c	/^static void AttributeChecks(TidyDocImpl* doc, Node* node)$/;"	f	file:
AttributeIsProprietary	libtidy/src/attrs.c	/^static Bool AttributeIsProprietary(Node* node, AttVal* attval)$/;"	f	file:
AttributeVersions	libtidy/src/attrs.c	/^static uint AttributeVersions(Node* node, AttVal* attval)$/;"	f	file:
AttrsHaveSameName	libtidy/src/attrs.c	/^static Bool AttrsHaveSameName( AttVal* av1, AttVal* av2)$/;"	f	file:
BL	libtidy/src/config.c	161;"	d	file:
BQ2Div	libtidy/src/clean.c	/^void TY_(BQ2Div)( TidyDocImpl* doc, Node *node )$/;"	f
BadForm	libtidy/src/parser.c	/^static void BadForm( TidyDocImpl* doc )$/;"	f	file:
Big5WrapPoint	libtidy/src/pprint.c	/^static WrapPoint Big5WrapPoint(tchar c)$/;"	f	file:
BlockStyle	libtidy/src/clean.c	/^static Bool BlockStyle( TidyDocImpl* doc, Node *node, Node **ARG_UNUSED(pnode) )$/;"	f	file:
BufferInput	libtidy/src/streamio.c	/^StreamIn* TY_(BufferInput)( TidyDocImpl* doc, TidyBuffer* buf, int encoding )$/;"	f
BufferOutput	libtidy/src/streamio.c	/^StreamOut* TY_(BufferOutput)( TidyDocImpl *doc, TidyBuffer* buf, int encoding, uint nl )$/;"	f
BumpObject	libtidy/src/clean.c	/^void TY_(BumpObject)( TidyDocImpl* doc, Node *html )$/;"	f
CDATAState	libtidy/src/lexer.c	/^} CDATAState;$/;"	t	typeref:enum:__anon4	file:
CDATAToken	libtidy/src/lexer.c	1262;"	d	file:
CDATA_END	libtidy/src/pprint.c	/^static ctmbstr CDATA_END             = "]]>";$/;"	v	file:
CDATA_ENDTAG	libtidy/src/lexer.c	/^    CDATA_ENDTAG$/;"	e	enum:__anon4	file:
CDATA_INTERMEDIATE	libtidy/src/lexer.c	/^    CDATA_INTERMEDIATE,$/;"	e	enum:__anon4	file:
CDATA_START	libtidy/src/pprint.c	/^static ctmbstr CDATA_START           = "<![CDATA[";$/;"	v	file:
CDATA_STARTTAG	libtidy/src/lexer.c	/^    CDATA_STARTTAG,$/;"	e	enum:__anon4	file:
CE	libtidy/src/config.c	157;"	d	file:
CH_ACTION	libtidy/src/attrs.c	93;"	d	file:
CH_ALIGN	libtidy/src/attrs.c	65;"	d	file:
CH_BOOL	libtidy/src/attrs.c	71;"	d	file:
CH_BORDER	libtidy/src/attrs.c	69;"	d	file:
CH_CHARACTER	libtidy/src/attrs.c	61;"	d	file:
CH_CHARSET	libtidy/src/attrs.c	58;"	d	file:
CH_CLEAR	libtidy/src/attrs.c	68;"	d	file:
CH_COLOR	libtidy/src/attrs.c	67;"	d	file:
CH_COLS	libtidy/src/attrs.c	72;"	d	file:
CH_COORDS	libtidy/src/attrs.c	75;"	d	file:
CH_DATE	libtidy/src/attrs.c	76;"	d	file:
CH_FBORDER	libtidy/src/attrs.c	83;"	d	file:
CH_FSUBMIT	libtidy/src/attrs.c	85;"	d	file:
CH_IDDEF	libtidy/src/attrs.c	80;"	d	file:
CH_IDREF	libtidy/src/attrs.c	79;"	d	file:
CH_IDREFS	libtidy/src/attrs.c	78;"	d	file:
CH_LANG	libtidy/src/attrs.c	70;"	d	file:
CH_LENGTH	libtidy/src/attrs.c	74;"	d	file:
CH_LINKTYPES	libtidy/src/attrs.c	86;"	d	file:
CH_MEDIA	libtidy/src/attrs.c	84;"	d	file:
CH_NAME	libtidy/src/attrs.c	81;"	d	file:
CH_NUMBER	libtidy/src/attrs.c	73;"	d	file:
CH_PCDATA	libtidy/src/attrs.c	57;"	d	file:
CH_SCOPE	libtidy/src/attrs.c	88;"	d	file:
CH_SCRIPT	libtidy/src/attrs.c	64;"	d	file:
CH_SCROLL	libtidy/src/attrs.c	90;"	d	file:
CH_SHAPE	libtidy/src/attrs.c	89;"	d	file:
CH_TARGET	libtidy/src/attrs.c	91;"	d	file:
CH_TEXTDIR	libtidy/src/attrs.c	77;"	d	file:
CH_TFRAME	libtidy/src/attrs.c	82;"	d	file:
CH_TRULES	libtidy/src/attrs.c	87;"	d	file:
CH_TYPE	libtidy/src/attrs.c	59;"	d	file:
CH_URL	libtidy/src/attrs.c	63;"	d	file:
CH_URLS	libtidy/src/attrs.c	62;"	d	file:
CH_VALIGN	libtidy/src/attrs.c	66;"	d	file:
CH_VTYPE	libtidy/src/attrs.c	92;"	d	file:
CH_XTYPE	libtidy/src/attrs.c	60;"	d	file:
CINTERFACE	libtidy/src/win32tc.c	19;"	d	file:
CINTERFACE	libtidy/src/win32tc.c	26;"	d	file:
COBJMACROS	libtidy/src/win32tc.c	20;"	d	file:
COBJMACROS	libtidy/src/win32tc.c	25;"	d	file:
CSS_COMMENT_END	libtidy/src/pprint.c	/^static ctmbstr CSS_COMMENT_END       = "*\/";$/;"	v	file:
CSS_COMMENT_START	libtidy/src/pprint.c	/^static ctmbstr CSS_COMMENT_START     = "\/*";$/;"	v	file:
CanApplyBlockStyle	libtidy/src/clean.c	/^static Bool CanApplyBlockStyle( Node *node )$/;"	f	file:
CanApplyInlineStyle	libtidy/src/clean.c	/^static Bool CanApplyInlineStyle( Node *node )$/;"	f	file:
CanPrune	libtidy/src/parser.c	/^static Bool CanPrune( TidyDocImpl* doc, Node *element )$/;"	f	file:
CarryOver	libtidy/src/pprint.c	/^static void CarryOver( int* valTo, int* valFrom, uint wrapPoint )$/;"	f	file:
Center2Div	libtidy/src/clean.c	/^static Bool Center2Div( TidyDocImpl* doc, Node *node, Node **pnode)$/;"	f	file:
ChangeChar	libtidy/src/lexer.c	/^static void ChangeChar( Lexer *lexer, tmbchar c )$/;"	f	file:
CharEncodingName	libtidy/src/config.c	/^ctmbstr TY_(CharEncodingName)( int encoding )$/;"	f
CharEncodingOptName	libtidy/src/config.c	/^ctmbstr TY_(CharEncodingOptName)( int encoding )$/;"	f
CharacterWrapPoint	libtidy/src/pprint.c	/^static WrapPoint CharacterWrapPoint(tchar c)$/;"	f	file:
CheckAREA	libtidy/src/tags.c	/^static CheckAttribs CheckAREA;$/;"	v	file:
CheckAREA	libtidy/src/tags.c	/^void CheckAREA( TidyDocImpl* doc, Node *node )$/;"	f
CheckASCII	libtidy/src/access.c	/^static void CheckASCII( TidyDocImpl* doc, Node* node )$/;"	f	file:
CheckAction	libtidy/src/attrs.c	/^static AttrCheck CheckAction;$/;"	v	file:
CheckAction	libtidy/src/attrs.c	/^void CheckAction( TidyDocImpl* doc, Node *node, AttVal *attval)$/;"	f
CheckAlign	libtidy/src/attrs.c	/^static AttrCheck CheckAlign;$/;"	v	file:
CheckAlign	libtidy/src/attrs.c	/^void CheckAlign( TidyDocImpl* doc, Node *node, AttVal *attval)$/;"	f
CheckAnchorAccess	libtidy/src/access.c	/^static void CheckAnchorAccess( TidyDocImpl* doc, Node* node )$/;"	f	file:
CheckApplet	libtidy/src/access.c	/^static void CheckApplet( TidyDocImpl* doc, Node* node )$/;"	f	file:
CheckArea	libtidy/src/access.c	/^static void CheckArea( TidyDocImpl* doc, Node* node )$/;"	f	file:
CheckAttrType	libtidy/src/attrs.c	/^static Bool CheckAttrType( TidyDocImpl* doc,$/;"	f	file:
CheckAttrValidity	libtidy/src/attrs.c	/^static void CheckAttrValidity( TidyDocImpl* doc, Node *node, AttVal *attval,$/;"	f	file:
CheckAttribute	libtidy/src/attrs.c	/^const Attribute* TY_(CheckAttribute)( TidyDocImpl* doc, Node *node, AttVal *attval )$/;"	f
CheckAttributes	libtidy/src/tags.c	/^void TY_(CheckAttributes)( TidyDocImpl* doc, Node *node )$/;"	f
CheckBlink	libtidy/src/access.c	/^static void CheckBlink( TidyDocImpl* doc, Node* node )$/;"	f	file:
CheckBool	libtidy/src/attrs.c	/^static AttrCheck CheckBool;$/;"	v	file:
CheckBool	libtidy/src/attrs.c	/^void CheckBool( TidyDocImpl* doc, Node *node, AttVal *attval)$/;"	f
CheckCaption	libtidy/src/tags.c	/^static CheckAttribs CheckCaption;$/;"	v	file:
CheckCaption	libtidy/src/tags.c	/^void CheckCaption(TidyDocImpl* doc, Node *node)$/;"	f
CheckClear	libtidy/src/attrs.c	/^static AttrCheck CheckClear;$/;"	v	file:
CheckClear	libtidy/src/attrs.c	/^void CheckClear( TidyDocImpl* doc, Node *node, AttVal *attval)$/;"	f
CheckColor	libtidy/src/attrs.c	/^static AttrCheck CheckColor;$/;"	v	file:
CheckColor	libtidy/src/attrs.c	/^void CheckColor( TidyDocImpl* doc, Node *node, AttVal *attval)$/;"	f
CheckColorAvailable	libtidy/src/access.c	/^static void CheckColorAvailable( TidyDocImpl* doc, Node* node )$/;"	f	file:
CheckColorContrast	libtidy/src/access.c	/^static void CheckColorContrast( TidyDocImpl* doc, Node* node )$/;"	f	file:
CheckColumns	libtidy/src/access.c	/^static void CheckColumns( TidyDocImpl* doc, Node* node )$/;"	f	file:
CheckDeprecated	libtidy/src/access.c	/^static void CheckDeprecated( TidyDocImpl* doc, Node* node )$/;"	f	file:
CheckDocType	libtidy/src/access.c	/^static void CheckDocType( TidyDocImpl* doc )$/;"	f	file:
CheckEmbed	libtidy/src/access.c	/^static void CheckEmbed( TidyDocImpl* doc, Node* node )$/;"	f	file:
CheckFORM	libtidy/src/tags.c	/^static CheckAttribs CheckFORM;$/;"	v	file:
CheckFORM	libtidy/src/tags.c	/^void CheckFORM( TidyDocImpl* doc, Node *node )$/;"	f
CheckFlicker	libtidy/src/access.c	/^static void CheckFlicker( TidyDocImpl* doc, Node* node )$/;"	f	file:
CheckForListElements	libtidy/src/access.c	/^static void CheckForListElements( TidyDocImpl* doc, Node* node )$/;"	f	file:
CheckForStyleAttribute	libtidy/src/access.c	/^static void CheckForStyleAttribute( TidyDocImpl* doc, Node* node )$/;"	f	file:
CheckFormControls	libtidy/src/access.c	/^static void CheckFormControls( TidyDocImpl* doc, Node* node )$/;"	f	file:
CheckFrame	libtidy/src/access.c	/^static void CheckFrame( TidyDocImpl* doc, Node* node )$/;"	f	file:
CheckFrameSet	libtidy/src/access.c	/^static void CheckFrameSet( TidyDocImpl* doc, Node* node )$/;"	f	file:
CheckFsubmit	libtidy/src/attrs.c	/^static AttrCheck CheckFsubmit;$/;"	v	file:
CheckFsubmit	libtidy/src/attrs.c	/^void CheckFsubmit( TidyDocImpl* doc, Node *node, AttVal *attval)$/;"	f
CheckHTML	libtidy/src/tags.c	/^static CheckAttribs CheckHTML;$/;"	v	file:
CheckHTML	libtidy/src/tags.c	/^void CheckHTML( TidyDocImpl* doc, Node *node )$/;"	f
CheckHTMLAccess	libtidy/src/access.c	/^static void CheckHTMLAccess( TidyDocImpl* doc, Node* node )$/;"	f	file:
CheckHeaderNesting	libtidy/src/access.c	/^static void CheckHeaderNesting( TidyDocImpl* doc, Node* node )$/;"	f	file:
CheckIFrame	libtidy/src/access.c	/^static void CheckIFrame( TidyDocImpl* doc, Node* node )$/;"	f	file:
CheckIMG	libtidy/src/tags.c	/^static CheckAttribs CheckIMG;$/;"	v	file:
CheckIMG	libtidy/src/tags.c	/^void CheckIMG( TidyDocImpl* doc, Node *node )$/;"	f
CheckId	libtidy/src/attrs.c	/^static AttrCheck CheckId;$/;"	v	file:
CheckId	libtidy/src/attrs.c	/^void CheckId( TidyDocImpl* doc, Node *node, AttVal *attval )$/;"	f
CheckImage	libtidy/src/access.c	/^static void CheckImage( TidyDocImpl* doc, Node* node )$/;"	f	file:
CheckInputAttributes	libtidy/src/access.c	/^static void CheckInputAttributes( TidyDocImpl* doc, Node* node )$/;"	f	file:
CheckInputLabel	libtidy/src/access.c	/^static void CheckInputLabel( TidyDocImpl* doc, Node* node )$/;"	f	file:
CheckLINK	libtidy/src/tags.c	/^static CheckAttribs CheckLINK;$/;"	v	file:
CheckLINK	libtidy/src/tags.c	/^void CheckLINK( TidyDocImpl* doc, Node *node )$/;"	f
CheckLabel	libtidy/src/access.c	/^static void CheckLabel( TidyDocImpl* doc, Node* node )$/;"	f	file:
CheckLang	libtidy/src/attrs.c	/^static AttrCheck CheckLang;$/;"	v	file:
CheckLang	libtidy/src/attrs.c	/^void CheckLang( TidyDocImpl* doc, Node *node, AttVal *attval)$/;"	f
CheckLength	libtidy/src/attrs.c	/^static AttrCheck CheckLength;$/;"	v	file:
CheckLength	libtidy/src/attrs.c	/^void CheckLength( TidyDocImpl* doc, Node *node, AttVal *attval)$/;"	f
CheckLink	libtidy/src/access.c	/^static void CheckLink( TidyDocImpl* doc, Node* node )$/;"	f	file:
CheckListUsage	libtidy/src/access.c	/^static void CheckListUsage( TidyDocImpl* doc, Node* node )$/;"	f	file:
CheckLowerCaseAttrValue	libtidy/src/attrs.c	/^static void CheckLowerCaseAttrValue( TidyDocImpl* doc, Node *node, AttVal *attval)$/;"	f	file:
CheckMETA	libtidy/src/tags.c	/^static CheckAttribs CheckMETA;$/;"	v	file:
CheckMETA	libtidy/src/tags.c	/^void CheckMETA( TidyDocImpl* doc, Node *node )$/;"	f
CheckMapLinks	libtidy/src/access.c	/^static void CheckMapLinks( TidyDocImpl* doc, Node* node )$/;"	f	file:
CheckMarquee	libtidy/src/access.c	/^static void CheckMarquee( TidyDocImpl* doc, Node* node )$/;"	f	file:
CheckMetaData	libtidy/src/access.c	/^static Bool CheckMetaData( TidyDocImpl* doc, Node* node, Bool HasMetaData )$/;"	f	file:
CheckMissingStyleSheets	libtidy/src/access.c	/^static Bool CheckMissingStyleSheets( TidyDocImpl* doc, Node* node )$/;"	f	file:
CheckMultiHeaders	libtidy/src/access.c	/^static void CheckMultiHeaders( TidyDocImpl* doc, Node* node )$/;"	f	file:
CheckName	libtidy/src/attrs.c	/^static AttrCheck CheckName;$/;"	v	file:
CheckName	libtidy/src/attrs.c	/^void CheckName( TidyDocImpl* doc, Node *node, AttVal *attval)$/;"	f
CheckNodeIntegrity	libtidy/src/parser.c	/^Bool TY_(CheckNodeIntegrity)(Node *node)$/;"	f
CheckNumber	libtidy/src/attrs.c	/^static AttrCheck CheckNumber;$/;"	v	file:
CheckNumber	libtidy/src/attrs.c	/^void CheckNumber( TidyDocImpl* doc, Node *node, AttVal *attval)$/;"	f
CheckObject	libtidy/src/access.c	/^static void CheckObject( TidyDocImpl* doc, Node* node )$/;"	f	file:
CheckParagraphHeader	libtidy/src/access.c	/^static void CheckParagraphHeader( TidyDocImpl* doc, Node* node )$/;"	f	file:
CheckRows	libtidy/src/access.c	/^static void CheckRows( TidyDocImpl* doc, Node* node )$/;"	f	file:
CheckSCRIPT	libtidy/src/tags.c	/^static CheckAttribs CheckSCRIPT;$/;"	v	file:
CheckSCRIPT	libtidy/src/tags.c	/^void CheckSCRIPT( TidyDocImpl* doc, Node *node )$/;"	f
CheckSTYLE	libtidy/src/tags.c	/^static CheckAttribs CheckSTYLE;$/;"	v	file:
CheckSTYLE	libtidy/src/tags.c	/^void CheckSTYLE( TidyDocImpl* doc, Node *node )$/;"	f
CheckScope	libtidy/src/attrs.c	/^static AttrCheck CheckScope;$/;"	v	file:
CheckScope	libtidy/src/attrs.c	/^void CheckScope( TidyDocImpl* doc, Node *node, AttVal *attval)$/;"	f
CheckScript	libtidy/src/attrs.c	/^static AttrCheck CheckScript;$/;"	v	file:
CheckScriptAcc	libtidy/src/access.c	/^static void CheckScriptAcc( TidyDocImpl* doc, Node* node )$/;"	f	file:
CheckScriptKeyboardAccessible	libtidy/src/access.c	/^static void CheckScriptKeyboardAccessible( TidyDocImpl* doc, Node* node )$/;"	f	file:
CheckScroll	libtidy/src/attrs.c	/^static AttrCheck CheckScroll;$/;"	v	file:
CheckScroll	libtidy/src/attrs.c	/^void CheckScroll( TidyDocImpl* doc, Node *node, AttVal *attval)$/;"	f
CheckShape	libtidy/src/attrs.c	/^static AttrCheck CheckShape;$/;"	v	file:
CheckShape	libtidy/src/attrs.c	/^void CheckShape( TidyDocImpl* doc, Node *node, AttVal *attval)$/;"	f
CheckStyle	libtidy/src/access.c	/^static void CheckStyle( TidyDocImpl* doc, Node* node )$/;"	f	file:
CheckTABLE	libtidy/src/tags.c	/^static CheckAttribs CheckTABLE;$/;"	v	file:
CheckTABLE	libtidy/src/tags.c	/^void CheckTABLE( TidyDocImpl* doc, Node *node )$/;"	f
CheckTH	libtidy/src/access.c	/^static void CheckTH( TidyDocImpl* doc, Node* node )$/;"	f	file:
CheckTable	libtidy/src/access.c	/^static void CheckTable( TidyDocImpl* doc, Node* node )$/;"	f	file:
CheckTarget	libtidy/src/attrs.c	/^static AttrCheck CheckTarget;$/;"	v	file:
CheckTarget	libtidy/src/attrs.c	/^void CheckTarget( TidyDocImpl* doc, Node *node, AttVal *attval)$/;"	f
CheckTextDir	libtidy/src/attrs.c	/^static AttrCheck CheckTextDir;$/;"	v	file:
CheckTextDir	libtidy/src/attrs.c	/^void CheckTextDir( TidyDocImpl* doc, Node *node, AttVal *attval)$/;"	f
CheckType	libtidy/src/attrs.c	/^static AttrCheck CheckType;$/;"	v	file:
CheckType	libtidy/src/attrs.c	/^void CheckType( TidyDocImpl* doc, Node *node, AttVal *attval)$/;"	f
CheckUrl	libtidy/src/attrs.c	/^void TY_(CheckUrl)( TidyDocImpl* doc, Node *node, AttVal *attval)$/;"	f
CheckVType	libtidy/src/attrs.c	/^static AttrCheck CheckVType;$/;"	v	file:
CheckVType	libtidy/src/attrs.c	/^void CheckVType( TidyDocImpl* doc, Node *node, AttVal *attval)$/;"	f
CheckValign	libtidy/src/attrs.c	/^static AttrCheck CheckValign;$/;"	v	file:
CheckValign	libtidy/src/attrs.c	/^void CheckValign( TidyDocImpl* doc, Node *node, AttVal *attval)$/;"	f
CheckWrapIndent	libtidy/src/pprint.c	/^static Bool CheckWrapIndent( TidyDocImpl* doc, uint indent )$/;"	f	file:
CheckWrapLine	libtidy/src/pprint.c	/^static Bool CheckWrapLine( TidyDocImpl* doc )$/;"	f	file:
CleanBodyAttrs	libtidy/src/clean.c	/^static void CleanBodyAttrs( TidyDocImpl* doc, Node* body )$/;"	f	file:
CleanDocument	libtidy/src/clean.c	/^void TY_(CleanDocument)( TidyDocImpl* doc )$/;"	f
CleanNode	libtidy/src/clean.c	/^Node* CleanNode( TidyDocImpl* doc, Node *node )$/;"	f
CleanSpaces	libtidy/src/parser.c	/^static void CleanSpaces(TidyDocImpl* doc, Node* node)$/;"	f	file:
CleanTrailingWhitespace	libtidy/src/parser.c	/^static Bool CleanTrailingWhitespace(TidyDocImpl* doc, Node* node)$/;"	f	file:
CleanTree	libtidy/src/clean.c	/^static Node* CleanTree( TidyDocImpl* doc, Node *node )$/;"	f	file:
CleanWord2000	libtidy/src/clean.c	/^void TY_(CleanWord2000)( TidyDocImpl* doc, Node *node)$/;"	f
ClearInAttrVal	libtidy/src/pprint.c	/^static void ClearInAttrVal( TidyPrintImpl* pprint )$/;"	f	file:
ClearInString	libtidy/src/pprint.c	/^static int ClearInString( TidyPrintImpl* pprint )$/;"	f	file:
CloneNode	libtidy/src/lexer.c	/^Node *TY_(CloneNode)( TidyDocImpl* doc, Node *element )$/;"	f
CmdOptCatFIRST	libtidy/console/tidy.c	/^  CmdOptCatFIRST = CmdOptFileManip,$/;"	e	enum:__anon5	file:
CmdOptCatLAST	libtidy/console/tidy.c	/^  CmdOptCatLAST$/;"	e	enum:__anon5	file:
CmdOptCategory	libtidy/console/tidy.c	/^} CmdOptCategory;$/;"	t	typeref:enum:__anon5	file:
CmdOptCharEnc	libtidy/console/tidy.c	/^  CmdOptCharEnc,$/;"	e	enum:__anon5	file:
CmdOptDesc	libtidy/console/tidy.c	/^} CmdOptDesc;$/;"	t	typeref:struct:__anon7	file:
CmdOptFileManip	libtidy/console/tidy.c	/^  CmdOptFileManip,$/;"	e	enum:__anon5	file:
CmdOptMisc	libtidy/console/tidy.c	/^  CmdOptMisc,$/;"	e	enum:__anon5	file:
CmdOptProcDir	libtidy/console/tidy.c	/^  CmdOptProcDir,$/;"	e	enum:__anon5	file:
CoerceNode	libtidy/src/parser.c	/^void TY_(CoerceNode)(TidyDocImpl* doc, Node *node, TidyTagId tid, Bool obsolete, Bool unexpected)$/;"	f
CombineSurrogatePair	libtidy/src/utf8.c	/^tchar   TY_(CombineSurrogatePair)( tchar high, tchar low )$/;"	f
CommentToken	libtidy/src/lexer.c	1254;"	d	file:
CompareColors	libtidy/src/access.c	/^static Bool CompareColors( const int rgbBG[3], const int rgbFG[3] )$/;"	f	file:
CondReturnTextNode	libtidy/src/lexer.c	1985;"	d	file:
CondReturnTextNode	libtidy/src/lexer.c	1993;"	d	file:
ConfigCategoryName	libtidy/console/tidy.c	/^ctmbstr ConfigCategoryName( TidyConfigCategory id )$/;"	f	file:
ConfigDiffThanDefault	libtidy/src/config.c	/^Bool  TY_(ConfigDiffThanDefault)( TidyDocImpl* doc )$/;"	f
ConfigDiffThanSnapshot	libtidy/src/config.c	/^Bool  TY_(ConfigDiffThanSnapshot)( TidyDocImpl* doc )$/;"	f
ConstrainVersion	libtidy/src/lexer.c	/^void TY_(ConstrainVersion)(TidyDocImpl* doc, uint vers)$/;"	f
ConvertCDATANodes	libtidy/src/clean.c	/^void TY_(ConvertCDATANodes)(TidyDocImpl* doc, Node* node)$/;"	f
CopyAttrs	libtidy/src/clean.c	/^static Bool CopyAttrs( TidyDocImpl* doc, Node *node, Node *child)$/;"	f	file:
CopyConfig	libtidy/src/config.c	/^void TY_(CopyConfig)( TidyDocImpl* docTo, TidyDocImpl* docFrom )$/;"	f
CopyOptionValue	libtidy/src/config.c	/^static void CopyOptionValue( TidyDocImpl* doc, const TidyOptionImpl* option,$/;"	f	file:
CreateMLangObject	libtidy/src/win32tc.c	35;"	d	file:
CreatePropString	libtidy/src/clean.c	/^static tmbstr CreatePropString(TidyDocImpl* doc, StyleProp *props)$/;"	f	file:
CreateProps	libtidy/src/clean.c	/^static StyleProp* CreateProps( TidyDocImpl* doc, StyleProp* prop, ctmbstr style )$/;"	f	file:
CreateStyleElement	libtidy/src/clean.c	/^static void CreateStyleElement( TidyDocImpl* doc )$/;"	f	file:
DEFAULT_COMMENT_END	libtidy/src/pprint.c	/^static ctmbstr DEFAULT_COMMENT_END   = "";$/;"	v	file:
DEFAULT_COMMENT_START	libtidy/src/pprint.c	/^static ctmbstr DEFAULT_COMMENT_START = "";$/;"	v	file:
DG	libtidy/src/config.c	155;"	d	file:
DIES_ON_ERROR	t/ignore.t	/^DIES_ON_ERROR: {$/;"	l
DLF	libtidy/src/config.c	167;"	d	file:
DOS_CRLF	libtidy/console/tab2space.c	11;"	d	file:
DeclareUserTag	libtidy/src/config.c	/^static void DeclareUserTag( TidyDocImpl* doc, TidyOptionId optId,$/;"	f	file:
DecodeIbm850	libtidy/src/streamio.c	/^static uint DecodeIbm850(uint c)$/;"	f	file:
DecodeLatin0	libtidy/src/streamio.c	/^static uint DecodeLatin0(uint c)$/;"	f	file:
DecodeMacRoman	libtidy/src/streamio.c	/^uint TY_(DecodeMacRoman)(uint c)$/;"	f
DecodeUTF8BytesToChar	libtidy/src/utf8.c	/^int TY_(DecodeUTF8BytesToChar)( uint* c, uint firstByte, ctmbstr successorBytes,$/;"	f
DecodeWin1252	libtidy/src/streamio.c	/^uint TY_(DecodeWin1252)(uint c)$/;"	f
DeferDup	libtidy/src/istack.c	/^void TY_(DeferDup)( TidyDocImpl* doc )$/;"	f
DefineStyleRules	libtidy/src/clean.c	/^static void DefineStyleRules( TidyDocImpl* doc, Node *node )$/;"	f	file:
DefineTag	libtidy/src/tags.c	/^void TY_(DefineTag)( TidyDocImpl* doc, UserTagType tagType, ctmbstr name )$/;"	f
DescendantOf	libtidy/src/parser.c	/^static Bool DescendantOf( Node *element, TidyTagId tid )$/;"	f	file:
DetachAttribute	libtidy/src/lexer.c	/^void TY_(DetachAttribute)( Node *node, AttVal *attr )$/;"	f
Dir2Div	libtidy/src/clean.c	/^static Bool Dir2Div( TidyDocImpl* doc, Node *node, Node **ARG_UNUSED(pnode))$/;"	f	file:
DiscardContainer	libtidy/src/clean.c	/^static void DiscardContainer( TidyDocImpl* doc, Node *element, Node **pnode)$/;"	f	file:
DiscardElement	libtidy/src/parser.c	/^Node *TY_(DiscardElement)( TidyDocImpl* doc, Node *element )$/;"	f
DisplayHTMLTableAlgorithm	libtidy/src/localize.c	/^void TY_(DisplayHTMLTableAlgorithm)( TidyDocImpl* doc )$/;"	f
DocParseFileWithMappedFile	libtidy/src/mappedio.c	/^int TY_(DocParseFileWithMappedFile)( TidyDocImpl* doc, ctmbstr filnam ) {$/;"	f
DocParseStream	libtidy/src/tidylib.c	/^int         TY_(DocParseStream)( TidyDocImpl* doc, StreamIn* in )$/;"	f
DocTypeToken	libtidy/src/lexer.c	1255;"	d	file:
DowngradeTypography	libtidy/src/clean.c	/^void TY_(DowngradeTypography)(TidyDocImpl* doc, Node* node)$/;"	f
DropComments	libtidy/src/clean.c	/^void TY_(DropComments)(TidyDocImpl* doc, Node* node)$/;"	f
DropEmptyElements	libtidy/src/parser.c	/^Node* TY_(DropEmptyElements)(TidyDocImpl* doc, Node* node)$/;"	f
DropFontElements	libtidy/src/clean.c	/^void TY_(DropFontElements)(TidyDocImpl* doc, Node* node, Node **ARG_UNUSED(pnode))$/;"	f
DropSections	libtidy/src/clean.c	/^void TY_(DropSections)( TidyDocImpl* doc, Node* node )$/;"	f
DupAttrs	libtidy/src/istack.c	/^AttVal *TY_(DupAttrs)( TidyDocImpl* doc, AttVal *attrs)$/;"	f
DynamicContent	libtidy/src/access.c	/^static void DynamicContent( TidyDocImpl* doc, Node* node )$/;"	f	file:
ERRORS_ONLY	t/ignore.t	/^ERRORS_ONLY: {$/;"	l
EmFromI	libtidy/src/clean.c	/^void TY_(EmFromI)( TidyDocImpl* doc, Node* node )$/;"	f
EncloseBlockText	libtidy/src/parser.c	/^static void EncloseBlockText(TidyDocImpl* doc, Node* node)$/;"	f	file:
EncloseBodyText	libtidy/src/parser.c	/^static void EncloseBodyText(TidyDocImpl* doc)$/;"	f	file:
EncodeCharToUTF8Bytes	libtidy/src/utf8.c	/^int TY_(EncodeCharToUTF8Bytes)( uint c, tmbstr encodebuf,$/;"	f
EncodeIbm858	libtidy/src/streamio.c	/^static void EncodeIbm858( uint c, StreamOut* out )$/;"	f	file:
EncodeLatin0	libtidy/src/streamio.c	/^static void EncodeLatin0( uint c, StreamOut* out )$/;"	f	file:
EncodeMacRoman	libtidy/src/streamio.c	/^static void EncodeMacRoman( uint c, StreamOut* out )$/;"	f	file:
EncodeWin1252	libtidy/src/streamio.c	/^static void EncodeWin1252( uint c, StreamOut* out )$/;"	f	file:
EndOfInput	libtidy/src/lexer.c	/^static Bool EndOfInput( TidyDocImpl* doc )$/;"	f	file:
EndsWithBytes	libtidy/src/access.c	/^static Bool EndsWithBytes( ctmbstr txt )$/;"	f	file:
EntityInfo	libtidy/src/entities.c	/^Bool TY_(EntityInfo)( ctmbstr name, Bool isXml, uint* code, uint* versions )$/;"	f
EntityName	libtidy/src/entities.c	/^ctmbstr TY_(EntityName)( uint ch, uint versions )$/;"	f
ErrorSummary	libtidy/src/localize.c	/^void TY_(ErrorSummary)( TidyDocImpl* doc )$/;"	f
ExpandTilde	libtidy/src/config.c	/^static ctmbstr ExpandTilde( TidyDocImpl* doc, ctmbstr filename )$/;"	f	file:
ExpectsContent	libtidy/src/lexer.c	/^static Bool ExpectsContent(Node *node)$/;"	f	file:
FileError	libtidy/src/localize.c	/^void TY_(FileError)( TidyDocImpl* doc, ctmbstr file, TidyReportLevel level )$/;"	f
FileInput	libtidy/src/streamio.c	/^StreamIn* TY_(FileInput)( TidyDocImpl* doc, FILE *fp, int encoding )$/;"	f
FileOutput	libtidy/src/streamio.c	/^StreamOut* TY_(FileOutput)( TidyDocImpl *doc, FILE* fp, int encoding, uint nl )$/;"	f
FileSource	libtidy/src/fileio.c	/^} FileSource;$/;"	t	typeref:struct:_fp_input_source	file:
FindAttribute	libtidy/src/attrs.c	/^const Attribute* TY_(FindAttribute)( TidyDocImpl* doc, AttVal *attval )$/;"	f
FindBody	libtidy/src/lexer.c	/^Node *TY_(FindBody)( TidyDocImpl* doc )$/;"	f
FindCSSSpanEq	libtidy/src/clean.c	/^Bool FindCSSSpanEq( Node *node, ctmbstr *s, Bool deprecatedOnly )$/;"	f	file:
FindContainer	libtidy/src/lexer.c	/^Node* TY_(FindContainer)( Node* node )$/;"	f
FindDocType	libtidy/src/lexer.c	/^Node *TY_(FindDocType)( TidyDocImpl* doc )$/;"	f
FindGivenVersion	libtidy/src/lexer.c	/^static uint FindGivenVersion( TidyDocImpl* doc, Node* doctype )$/;"	f	file:
FindHEAD	libtidy/src/lexer.c	/^Node *TY_(FindHEAD)( TidyDocImpl* doc )$/;"	f
FindHTML	libtidy/src/lexer.c	/^Node *TY_(FindHTML)( TidyDocImpl* doc )$/;"	f
FindLastLI	libtidy/src/parser.c	/^static Bool FindLastLI( Node *list, Node **lastli )$/;"	f	file:
FindLinkA	libtidy/src/access.c	/^static Bool FindLinkA( TidyDocImpl* doc, Node* node, ctmbstr url )$/;"	f	file:
FindParser	libtidy/src/tags.c	/^Parser* TY_(FindParser)( TidyDocImpl* doc, Node *node )$/;"	f
FindStyle	libtidy/src/clean.c	/^static ctmbstr FindStyle( TidyDocImpl* doc, ctmbstr tag, ctmbstr properties )$/;"	f	file:
FindTITLE	libtidy/src/lexer.c	/^Node *TY_(FindTITLE)(TidyDocImpl* doc)$/;"	f
FindTag	libtidy/src/tags.c	/^Bool TY_(FindTag)( TidyDocImpl* doc, Node *node )$/;"	f
FindXmlDecl	libtidy/src/lexer.c	/^Node *TY_(FindXmlDecl)(TidyDocImpl* doc)$/;"	f
FirstChar	libtidy/src/config.c	/^static tchar FirstChar( TidyConfigImpl* config )$/;"	f	file:
FixAnchors	libtidy/src/clean.c	/^void TY_(FixAnchors)(TidyDocImpl* doc, Node *node, Bool wantName, Bool wantId)$/;"	f
FixDocType	libtidy/src/lexer.c	/^Bool TY_(FixDocType)( TidyDocImpl* doc )$/;"	f
FixEmptyRow	libtidy/src/parser.c	/^static void FixEmptyRow(TidyDocImpl* doc, Node *row)$/;"	f	file:
FixLanguageInformation	libtidy/src/clean.c	/^void TY_(FixLanguageInformation)(TidyDocImpl* doc, Node* node, Bool wantXmlLang, Bool wantLang)$/;"	f
FixNodeLinks	libtidy/src/clean.c	/^void TY_(FixNodeLinks)(Node *node)$/;"	f
FixXhtmlNamespace	libtidy/src/clean.c	/^void TY_(FixXhtmlNamespace)(TidyDocImpl* doc, Bool wantXmlns)$/;"	f
FixXmlDecl	libtidy/src/lexer.c	/^Bool TY_(FixXmlDecl)( TidyDocImpl* doc )$/;"	f
Font2Span	libtidy/src/clean.c	/^static Bool Font2Span( TidyDocImpl* doc, Node *node, Node **pnode )$/;"	f	file:
FontSize2Name	libtidy/src/clean.c	/^static ctmbstr FontSize2Name(ctmbstr size)$/;"	f	file:
ForEachOption	libtidy/console/tidy.c	/^static void ForEachOption( TidyDoc tdoc, OptionFunc OptionPrint )$/;"	f	file:
ForEachSortedOption	libtidy/console/tidy.c	/^static void ForEachSortedOption( TidyDoc tdoc, OptionFunc OptionPrint )$/;"	f	file:
FreeAnchor	libtidy/src/attrs.c	/^static void FreeAnchor(TidyDocImpl* doc, Anchor *a)$/;"	f	file:
FreeAnchors	libtidy/src/attrs.c	/^void TY_(FreeAnchors)( TidyDocImpl* doc )$/;"	f
FreeAttrTable	libtidy/src/attrs.c	/^void TY_(FreeAttrTable)( TidyDocImpl* doc )$/;"	f
FreeAttribute	libtidy/src/lexer.c	/^void TY_(FreeAttribute)( TidyDocImpl* doc, AttVal *av )$/;"	f
FreeAttrs	libtidy/src/lexer.c	/^void TY_(FreeAttrs)( TidyDocImpl* doc, Node *node )$/;"	f
FreeConfig	libtidy/src/config.c	/^void TY_(FreeConfig)( TidyDocImpl* doc )$/;"	f
FreeDeclaredAttributes	libtidy/src/attrs.c	/^static void FreeDeclaredAttributes( TidyDocImpl* doc )$/;"	f	file:
FreeDeclaredTags	libtidy/src/tags.c	/^void TY_(FreeDeclaredTags)( TidyDocImpl* doc, UserTagType tagType )$/;"	f
FreeDict	libtidy/src/tags.c	/^static void FreeDict( TidyDocImpl* doc, Dict *d )$/;"	f	file:
FreeLexer	libtidy/src/lexer.c	/^void TY_(FreeLexer)( TidyDocImpl* doc )$/;"	f
FreeNode	libtidy/src/lexer.c	/^void TY_(FreeNode)( TidyDocImpl* doc, Node *node )$/;"	f
FreeOptionValue	libtidy/src/config.c	/^static void FreeOptionValue( TidyDocImpl* doc, const TidyOptionImpl* option, TidyOptionValue* value )$/;"	f	file:
FreePrintBuf	libtidy/src/pprint.c	/^void TY_(FreePrintBuf)( TidyDocImpl* doc )$/;"	f
FreeStream	libtidy/console/tab2space.c	/^static void FreeStream(Stream *in)$/;"	f	file:
FreeStyleProps	libtidy/src/clean.c	/^static void FreeStyleProps(TidyDocImpl* doc, StyleProp *props)$/;"	f	file:
FreeStyles	libtidy/src/clean.c	/^void TY_(FreeStyles)( TidyDocImpl* doc )$/;"	f
FreeTags	libtidy/src/tags.c	/^void TY_(FreeTags)( TidyDocImpl* doc )$/;"	f
GeneralInfo	libtidy/src/localize.c	/^void TY_(GeneralInfo)( TidyDocImpl* doc )$/;"	f
GensymClass	libtidy/src/clean.c	/^static tmbstr GensymClass( TidyDocImpl* doc )$/;"	f	file:
GetAllowedValues	libtidy/console/tidy.c	/^tmbstr GetAllowedValues( TidyOption topt, const OptionDesc *d )$/;"	f	file:
GetAllowedValuesFromPick	libtidy/console/tidy.c	/^tmbstr GetAllowedValuesFromPick( TidyOption topt )$/;"	f	file:
GetAttValComparator	libtidy/src/attrs.c	/^ptAttValComparator GetAttValComparator(TidyAttrSortStrategy strat)$/;"	f	file:
GetAttrByName	libtidy/src/attrs.c	/^AttVal* TY_(GetAttrByName)( Node *node, ctmbstr name )$/;"	f
GetC	libtidy/src/config.c	/^static tchar GetC( TidyConfigImpl* config )$/;"	f	file:
GetCDATA	libtidy/src/lexer.c	/^static Node *GetCDATA( TidyDocImpl* doc, Node *container )$/;"	f	file:
GetCharEncodingFromOptName	libtidy/src/streamio.c	/^int TY_(GetCharEncodingFromOptName)( ctmbstr charenc )$/;"	f
GetColorCode	libtidy/src/attrs.c	/^static ctmbstr GetColorCode(ctmbstr name)$/;"	f	file:
GetColorName	libtidy/src/attrs.c	/^static ctmbstr GetColorName(ctmbstr code)$/;"	f	file:
GetDeclaredTagList	libtidy/src/tags.c	/^TidyIterator   TY_(GetDeclaredTagList)( TidyDocImpl* doc )$/;"	f
GetEncodingCodePageFromId	libtidy/src/charsets.c	/^uint TY_(GetEncodingCodePageFromId)(uint id)$/;"	f
GetEncodingCodePageFromName	libtidy/src/charsets.c	/^uint TY_(GetEncodingCodePageFromName)(ctmbstr name)$/;"	f
GetEncodingIdFromCodePage	libtidy/src/charsets.c	/^uint TY_(GetEncodingIdFromCodePage)(uint cp)$/;"	f
GetEncodingIdFromName	libtidy/src/charsets.c	/^uint TY_(GetEncodingIdFromName)(ctmbstr name)$/;"	f
GetEncodingNameFromCodePage	libtidy/src/charsets.c	/^ctmbstr TY_(GetEncodingNameFromCodePage)(uint cp)$/;"	f
GetEncodingNameFromId	libtidy/src/charsets.c	/^ctmbstr TY_(GetEncodingNameFromId)(uint id)$/;"	f
GetEncodingNameFromTidyId	libtidy/src/streamio.c	/^ctmbstr TY_(GetEncodingNameFromTidyId)(uint id)$/;"	f
GetEncodingOptNameFromTidyId	libtidy/src/streamio.c	/^ctmbstr TY_(GetEncodingOptNameFromTidyId)(uint id)$/;"	f
GetFPIFromVers	libtidy/src/lexer.c	/^static ctmbstr GetFPIFromVers(uint vers)$/;"	f	file:
GetFileExtension	libtidy/src/access.c	/^static void GetFileExtension( ctmbstr path, tmbchar *ext, uint maxExt )$/;"	f	file:
GetFormatFromCode	libtidy/src/localize.c	/^static ctmbstr GetFormatFromCode(uint code)$/;"	f	file:
GetNameFromVers	libtidy/src/lexer.c	/^static ctmbstr GetNameFromVers(uint vers)$/;"	f	file:
GetNodeByAnchor	libtidy/src/attrs.c	/^static Node* GetNodeByAnchor( TidyDocImpl* doc, ctmbstr name )$/;"	f	file:
GetOption	libtidy/console/tidy.c	/^void GetOption( TidyDoc tdoc, TidyOption topt, OptionDesc *d )$/;"	f	file:
GetOptionDefault	libtidy/src/config.c	/^static void GetOptionDefault( const TidyOptionImpl* option,$/;"	f	file:
GetRgb	libtidy/src/access.c	/^static Bool GetRgb( ctmbstr color, int rgb[] )$/;"	f	file:
GetSIFromVers	libtidy/src/lexer.c	/^static ctmbstr GetSIFromVers(uint vers)$/;"	f	file:
GetSpaces	libtidy/src/pprint.c	/^static uint GetSpaces( TidyPrintImpl* pprint )$/;"	f	file:
GetToken	libtidy/src/lexer.c	/^Node* TY_(GetToken)( TidyDocImpl* doc, GetTokenMode mode )$/;"	f
GetTokenFromStream	libtidy/src/lexer.c	/^static Node* GetTokenFromStream( TidyDocImpl* doc, GetTokenMode mode )$/;"	f	file:
GetUTF8	libtidy/src/utf8.c	/^uint TY_(GetUTF8)( ctmbstr str, uint *ch )$/;"	f
GetVersFromFPI	libtidy/src/lexer.c	/^static uint GetVersFromFPI(ctmbstr fpi)$/;"	f	file:
HTML::Tidy	lib/HTML/Tidy.pm	/^package HTML::Tidy;$/;"	p
HTML::Tidy::Message	lib/HTML/Tidy/Message.pm	/^package HTML::Tidy::Message;$/;"	p
HTMLVersion	libtidy/src/lexer.c	/^int TY_(HTMLVersion)(TidyDocImpl* doc)$/;"	f
HTMLVersionNameFromCode	libtidy/src/lexer.c	/^ctmbstr TY_(HTMLVersionNameFromCode)( uint vers, Bool ARG_UNUSED(isXhtml) )$/;"	f
HasCDATA	libtidy/src/pprint.c	/^static Bool HasCDATA( Lexer* lexer, Node* node )$/;"	f	file:
HasMixedContent	libtidy/src/pprint.c	/^static Bool HasMixedContent (Node *element)$/;"	f	file:
HasOneChild	libtidy/src/clean.c	/^static Bool HasOneChild(Node *node)$/;"	f	file:
HelpText	libtidy/console/tab2space.c	/^static void HelpText(FILE *errout, char *prog)$/;"	f	file:
IBM2Unicode	libtidy/src/streamio.c	/^static const uint IBM2Unicode[128] =$/;"	v	file:
IGNORE_BOGOTAG	t/ignore-text.t	/^IGNORE_BOGOTAG: {$/;"	l
IN	libtidy/src/config.c	160;"	d	file:
IconvGetChar	libtidy/src/iconvtc.c	/^int IconvGetChar(byte firstByte, StreamIn * in, uint * bytesRead)$/;"	f
IconvInitInputTranscoder	libtidy/src/iconvtc.c	/^Bool IconvInitInputTranscoder(void)$/;"	f
IconvUninitInputTranscoder	libtidy/src/iconvtc.c	/^void IconvUninitInputTranscoder(void)$/;"	f
IncrWS	libtidy/src/pprint.c	/^static uint IncrWS( uint start, uint end, uint indent, int ixWS )$/;"	f	file:
InferredTag	libtidy/src/lexer.c	/^Node* TY_(InferredTag)(TidyDocImpl* doc, TidyTagId id)$/;"	f
InitAccessibilityChecks	libtidy/src/access.c	/^static void InitAccessibilityChecks( TidyDocImpl* doc, int level123 )$/;"	f	file:
InitAttrs	libtidy/src/attrs.c	/^void TY_(InitAttrs)( TidyDocImpl* doc )$/;"	f
InitConfig	libtidy/src/config.c	/^void TY_(InitConfig)( TidyDocImpl* doc )$/;"	f
InitIndent	libtidy/src/pprint.c	/^static void InitIndent( TidyIndent* ind )$/;"	f	file:
InitLastPos	libtidy/src/streamio.c	/^static void InitLastPos( StreamIn *in )$/;"	f	file:
InitMap	libtidy/src/lexer.c	/^void TY_(InitMap)(void)$/;"	f
InitPrintBuf	libtidy/src/pprint.c	/^void TY_(InitPrintBuf)( TidyDocImpl* doc )$/;"	f
InitTags	libtidy/src/tags.c	/^void TY_(InitTags)( TidyDocImpl* doc )$/;"	f
InlineDup	libtidy/src/istack.c	/^int TY_(InlineDup)( TidyDocImpl* doc, Node* node )$/;"	f
InlineDup1	libtidy/src/istack.c	/^Bool TY_(InlineDup1)( TidyDocImpl* doc, Node* node, Node* element )$/;"	f
InlineElementToCSS	libtidy/src/clean.c	/^static Bool InlineElementToCSS( TidyDocImpl* doc, Node* node,$/;"	f	file:
InlineStyle	libtidy/src/clean.c	/^static Bool InlineStyle( TidyDocImpl* doc, Node *node, Node **ARG_UNUSED(pnode) )$/;"	f	file:
InsertAttributeAtEnd	libtidy/src/lexer.c	/^void TY_(InsertAttributeAtEnd)( Node *node, AttVal *av )$/;"	f
InsertAttributeAtStart	libtidy/src/lexer.c	/^void TY_(InsertAttributeAtStart)( Node *node, AttVal *av )$/;"	f
InsertDocType	libtidy/src/parser.c	/^static void InsertDocType( TidyDocImpl* doc, Node *element, Node *doctype )$/;"	f	file:
InsertMisc	libtidy/src/parser.c	/^static Bool InsertMisc(Node *element, Node *node)$/;"	f	file:
InsertNodeAfterElement	libtidy/src/parser.c	/^void TY_(InsertNodeAfterElement)(Node *element, Node *node)$/;"	f
InsertNodeAsParent	libtidy/src/parser.c	/^static void InsertNodeAsParent(Node *element, Node *node)$/;"	f	file:
InsertNodeAtEnd	libtidy/src/parser.c	/^void TY_(InsertNodeAtEnd)(Node *element, Node *node)$/;"	f
InsertNodeAtStart	libtidy/src/parser.c	/^void TY_(InsertNodeAtStart)(Node *element, Node *node)$/;"	f
InsertNodeBeforeElement	libtidy/src/parser.c	/^void TY_(InsertNodeBeforeElement)(Node *element, Node *node)$/;"	f
InsertProperty	libtidy/src/clean.c	/^static StyleProp *InsertProperty( TidyDocImpl* doc, StyleProp* props, ctmbstr name, ctmbstr value )$/;"	f	file:
InsertedToken	libtidy/src/istack.c	/^Node *TY_(InsertedToken)( TidyDocImpl* doc )$/;"	f
InsideHead	libtidy/src/pprint.c	/^static Bool InsideHead( TidyDocImpl* doc, Node *node )$/;"	f	file:
IsBlank	libtidy/src/parser.c	/^Bool TY_(IsBlank)(Lexer *lexer, Node *node)$/;"	f
IsBoolAttribute	libtidy/src/attrs.c	/^Bool TY_(IsBoolAttribute)(AttVal *attval)$/;"	f
IsCSS1Selector	libtidy/src/attrs.c	/^Bool TY_(IsCSS1Selector)( ctmbstr buf )$/;"	f
IsCombinedChar	libtidy/src/utf8.c	/^Bool    TY_(IsCombinedChar)( tchar ch )$/;"	f
IsDigit	libtidy/src/lexer.c	/^Bool TY_(IsDigit)(uint c)$/;"	f
IsDigitHex	libtidy/src/lexer.c	/^static Bool IsDigitHex(uint c)$/;"	f	file:
IsEOF	libtidy/src/streamio.c	/^Bool TY_(IsEOF)( StreamIn* in )$/;"	f
IsHighSurrogate	libtidy/src/utf8.c	/^Bool    TY_(IsHighSurrogate)( tchar ch )$/;"	f
IsImage	libtidy/src/access.c	/^static Bool IsImage( ctmbstr iType )$/;"	f	file:
IsInString	libtidy/src/pprint.c	/^static Bool IsInString( TidyPrintImpl* pprint )$/;"	f	file:
IsJavaScript	libtidy/src/parser.c	/^Bool TY_(IsJavaScript)(Node *node)$/;"	f
IsLetter	libtidy/src/lexer.c	/^Bool TY_(IsLetter)(uint c)$/;"	f
IsLowSurrogate	libtidy/src/utf8.c	/^Bool    TY_(IsLowSurrogate)( tchar ch )$/;"	f
IsNamechar	libtidy/src/lexer.c	/^Bool TY_(IsNamechar)(uint c)$/;"	f
IsNewNode	libtidy/src/parser.c	/^Bool TY_(IsNewNode)(Node *node)$/;"	f
IsNewline	libtidy/src/lexer.c	/^Bool TY_(IsNewline)(uint c)$/;"	f
IsNodePushable	libtidy/src/istack.c	/^static Bool IsNodePushable( Node *node )$/;"	f	file:
IsPlaceHolderObject	libtidy/src/access.c	/^static Bool IsPlaceHolderObject( ctmbstr txt )$/;"	f	file:
IsPlaceholderAlt	libtidy/src/access.c	/^static Bool IsPlaceholderAlt( ctmbstr txt )$/;"	f	file:
IsPreDescendant	libtidy/src/parser.c	/^static Bool IsPreDescendant(Node* node)$/;"	f	file:
IsPushed	libtidy/src/istack.c	/^Bool TY_(IsPushed)( TidyDocImpl* doc, Node *node )$/;"	f
IsPushedLast	libtidy/src/istack.c	/^Bool TY_(IsPushedLast)( TidyDocImpl* doc, Node *element, Node *node )$/;"	f
IsScript	libtidy/src/attrs.c	/^Bool TY_(IsScript)( TidyDocImpl* doc, ctmbstr attrname )$/;"	f
IsSoundFile	libtidy/src/access.c	/^static int IsSoundFile( ctmbstr sType )$/;"	f	file:
IsUpper	libtidy/src/lexer.c	/^Bool TY_(IsUpper)(uint c)$/;"	f
IsUrl	libtidy/src/attrs.c	/^Bool TY_(IsUrl)( TidyDocImpl* doc, ctmbstr attrname )$/;"	f
IsValidAttrName	libtidy/src/lexer.c	/^static Bool IsValidAttrName( ctmbstr attr )$/;"	f	file:
IsValidColorCode	libtidy/src/attrs.c	/^static Bool IsValidColorCode(ctmbstr color)$/;"	f	file:
IsValidCombinedChar	libtidy/src/utf8.c	/^Bool    TY_(IsValidCombinedChar)( tchar ch )$/;"	f
IsValidHTMLID	libtidy/src/attrs.c	/^Bool TY_(IsValidHTMLID)(ctmbstr id)$/;"	f
IsValidMediaExtension	libtidy/src/access.c	/^static Bool IsValidMediaExtension( ctmbstr sType )$/;"	f	file:
IsValidNMTOKEN	libtidy/src/attrs.c	/^static Bool IsValidNMTOKEN(ctmbstr name)$/;"	f	file:
IsValidSrcExtension	libtidy/src/access.c	/^static Bool IsValidSrcExtension( ctmbstr sType )$/;"	f	file:
IsValidUTF16FromUCS4	libtidy/src/utf8.c	/^Bool    TY_(IsValidUTF16FromUCS4)( tchar ucs4 )$/;"	f
IsValidXMLAttrName	libtidy/src/lexer.c	68;"	d	file:
IsValidXMLElemName	libtidy/src/lexer.c	69;"	d	file:
IsValidXMLID	libtidy/src/attrs.c	/^Bool TY_(IsValidXMLID)(ctmbstr id)$/;"	f
IsWhite	libtidy/src/lexer.c	/^Bool TY_(IsWhite)(uint c)$/;"	f
IsWhitespace	libtidy/src/access.c	/^static Bool IsWhitespace( ctmbstr pString )$/;"	f	file:
IsWord2000	libtidy/src/clean.c	/^Bool TY_(IsWord2000)( TidyDocImpl* doc )$/;"	f
IsWrapInAttrVal	libtidy/src/pprint.c	/^static Bool IsWrapInAttrVal( TidyPrintImpl* pprint )$/;"	f	file:
IsWrapInString	libtidy/src/pprint.c	/^static Bool IsWrapInString( TidyPrintImpl* pprint )$/;"	f	file:
IsXMLLetter	libtidy/src/lexer.c	/^Bool TY_(IsXMLLetter)(uint c)$/;"	f
IsXMLNamechar	libtidy/src/lexer.c	/^Bool TY_(IsXMLNamechar)(uint c)$/;"	f
JS_COMMENT_END	libtidy/src/pprint.c	/^static ctmbstr JS_COMMENT_END        = "";$/;"	v	file:
JS_COMMENT_START	libtidy/src/pprint.c	/^static ctmbstr JS_COMMENT_START      = "\/\/";$/;"	v	file:
JsteToken	libtidy/src/lexer.c	1258;"	d	file:
LastChar	libtidy/src/lexer.c	/^static tmbchar LastChar( tmbstr str )$/;"	f	file:
Level1_Enabled	libtidy/src/access.c	/^static Bool Level1_Enabled( TidyDocImpl* doc )$/;"	f	file:
Level2_Enabled	libtidy/src/access.c	/^static Bool Level2_Enabled( TidyDocImpl* doc )$/;"	f	file:
Level3_Enabled	libtidy/src/access.c	/^static Bool Level3_Enabled( TidyDocImpl* doc )$/;"	f	file:
LevelPrefix	libtidy/src/localize.c	/^static char* LevelPrefix( TidyReportLevel level, char* buf, size_t count )$/;"	f	file:
List2BQ	libtidy/src/clean.c	/^void TY_(List2BQ)( TidyDocImpl* doc, Node* node )$/;"	f
LookupTagDef	libtidy/src/tags.c	/^const Dict* TY_(LookupTagDef)( TidyTagId tid )$/;"	f
MAC_CR	libtidy/console/tab2space.c	13;"	d	file:
MAP	libtidy/src/lexer.c	65;"	d	file:
MS	libtidy/src/config.c	158;"	d	file:
MU	libtidy/src/config.c	154;"	d	file:
Mac2Unicode	libtidy/src/streamio.c	/^static const uint Mac2Unicode[128] = $/;"	v	file:
MapStr	libtidy/src/lexer.c	/^static void MapStr( ctmbstr str, uint code )$/;"	f	file:
MappedFileInput	libtidy/src/mappedio.c	/^StreamIn* MappedFileInput ( TidyDocImpl* doc, HANDLE fp, int encoding )$/;"	f
MappedFileSource	libtidy/src/mappedio.c	/^} MappedFileSource;$/;"	t	typeref:struct:__anon3	file:
MappedFileSource	libtidy/src/mappedio.c	/^} MappedFileSource;$/;"	t	typeref:struct:_fp_input_mapped_source	file:
MemAlloc	libtidy/console/tab2space.c	/^void *MemAlloc(size_t size)$/;"	f
MemFree	libtidy/console/tab2space.c	/^void MemFree(void *p)$/;"	f
MemRealloc	libtidy/console/tab2space.c	/^void *MemRealloc(void *old, size_t size)$/;"	f
MergeClasses	libtidy/src/clean.c	/^static void MergeClasses(TidyDocImpl* doc, Node *node, Node *child)$/;"	f	file:
MergeNestedElements	libtidy/src/clean.c	/^static Bool MergeNestedElements( TidyDocImpl* doc,$/;"	f	file:
MergeProperties	libtidy/src/clean.c	/^static tmbstr MergeProperties( TidyDocImpl* doc, ctmbstr s1, ctmbstr s2 )$/;"	f	file:
MergeStyles	libtidy/src/clean.c	/^static void MergeStyles(TidyDocImpl* doc, Node *node, Node *child)$/;"	f	file:
MetaDataPresent	libtidy/src/access.c	/^static void MetaDataPresent( TidyDocImpl* doc, Node* node )$/;"	f	file:
MoveNodeToBody	libtidy/src/parser.c	/^static void MoveNodeToBody( TidyDocImpl* doc, Node* node )$/;"	f	file:
MoveToHead	libtidy/src/parser.c	/^static void MoveToHead( TidyDocImpl* doc, Node *element, Node *node )$/;"	f	file:
N_AUDIO_EXTS	libtidy/src/access.c	78;"	d	file:
N_COLORS	libtidy/src/access.c	140;"	d	file:
N_COLOR_NAMES	libtidy/src/access.c	139;"	d	file:
N_COLOR_VALS	libtidy/src/access.c	116;"	d	file:
N_FRAME_EXTS	libtidy/src/access.c	93;"	d	file:
N_IMAGE_EXTS	libtidy/src/access.c	62;"	d	file:
N_MEDIA_EXTS	libtidy/src/access.c	86;"	d	file:
NameWinCPMap	libtidy/src/win32tc.c	/^} const NameWinCPMap[] = {$/;"	v	file:
NeedReparseTagDecls	libtidy/src/config.c	/^static Bool NeedReparseTagDecls( const TidyOptionValue* current,$/;"	f	file:
NeedsAuthorIntervention	libtidy/src/localize.c	/^void TY_(NeedsAuthorIntervention)( TidyDocImpl* doc )$/;"	f
NestedEmphasis	libtidy/src/clean.c	/^void TY_(NestedEmphasis)( TidyDocImpl* doc, Node* node )$/;"	f
NestedList	libtidy/src/clean.c	/^static Bool NestedList( TidyDocImpl* doc, Node *node, Node **pnode )$/;"	f	file:
NewAnchor	libtidy/src/attrs.c	/^static Anchor* NewAnchor( TidyDocImpl* doc, ctmbstr name, Node* node )$/;"	f	file:
NewAttribute	libtidy/src/lexer.c	/^AttVal *TY_(NewAttribute)( TidyDocImpl* doc )$/;"	f
NewAttributeEx	libtidy/src/lexer.c	/^AttVal* TY_(NewAttributeEx)( TidyDocImpl* doc, ctmbstr name, ctmbstr value,$/;"	f
NewDict	libtidy/src/tags.c	/^static Dict* NewDict( TidyDocImpl* doc, ctmbstr name )$/;"	f	file:
NewDocTypeNode	libtidy/src/lexer.c	/^static Node* NewDocTypeNode( TidyDocImpl* doc )$/;"	f	file:
NewLexer	libtidy/src/lexer.c	/^Lexer* TY_(NewLexer)( TidyDocImpl* doc )$/;"	f
NewLineNode	libtidy/src/lexer.c	/^Node *TY_(NewLineNode)( Lexer *lexer )$/;"	f
NewLiteralTextNode	libtidy/src/lexer.c	/^Node* TY_(NewLiteralTextNode)( Lexer *lexer, ctmbstr txt )$/;"	f
NewNode	libtidy/src/lexer.c	/^Node *TY_(NewNode)(TidyAllocator* allocator, Lexer *lexer)$/;"	f
NewStream	libtidy/console/tab2space.c	/^static Stream *NewStream(FILE *fp)$/;"	f	file:
NewToken	libtidy/src/lexer.c	/^static Node* NewToken(TidyDocImpl* doc, NodeType type)$/;"	f	file:
NextProperty	libtidy/src/config.c	/^static uint NextProperty( TidyConfigImpl* config )$/;"	f	file:
NiceBody	libtidy/src/clean.c	/^static Bool NiceBody( TidyDocImpl* doc )$/;"	f	file:
NoMargins	libtidy/src/clean.c	/^static Bool NoMargins(Node *node)$/;"	f	file:
NoWrapPoint	libtidy/src/pprint.c	/^    NoWrapPoint,$/;"	e	enum:__anon2	file:
NodeAttributeVersions	libtidy/src/attrs.c	/^uint TY_(NodeAttributeVersions)( Node* node, TidyAttrId id )$/;"	f
NormalizeSpaces	libtidy/src/clean.c	/^void TY_(NormalizeSpaces)(Lexer *lexer, Node *node)$/;"	f
NtoS	libtidy/src/localize.c	/^static void NtoS(int n, tmbstr str)$/;"	f	file:
OptGetDocDesc	libtidy/src/localize.c	/^const TidyOptionDoc* TY_(OptGetDocDesc)( TidyOptionId optId )$/;"	f
OptionDesc	libtidy/console/tidy.c	/^} OptionDesc;$/;"	t	typeref:struct:__anon8	file:
OptionFunc	libtidy/console/tidy.c	/^typedef void (*OptionFunc)( TidyDoc, TidyOption, OptionDesc * );$/;"	t	file:
OptionValueEqDefault	libtidy/src/config.c	/^static Bool OptionValueEqDefault( const TidyOptionImpl* option,$/;"	f	file:
OptionValueIdentical	libtidy/src/config.c	/^static Bool OptionValueIdentical( const TidyOptionImpl* option,$/;"	f	file:
PCondFlushLine	libtidy/src/pprint.c	/^static void PCondFlushLine( TidyDocImpl* doc, uint indent )$/;"	f	file:
PFlushLine	libtidy/src/pprint.c	/^void TY_(PFlushLine)( TidyDocImpl* doc, uint indent )$/;"	f
PFlushLineImpl	libtidy/src/pprint.c	/^static void PFlushLineImpl( TidyDocImpl* doc )$/;"	f	file:
PIToken	libtidy/src/lexer.c	1256;"	d	file:
PP	libtidy/src/config.c	156;"	d	file:
PPrintAsp	libtidy/src/pprint.c	/^static void PPrintAsp( TidyDocImpl* doc, uint indent, Node *node )$/;"	f	file:
PPrintAttrValue	libtidy/src/pprint.c	/^static void PPrintAttrValue( TidyDocImpl* doc, uint indent,$/;"	f	file:
PPrintAttribute	libtidy/src/pprint.c	/^static void PPrintAttribute( TidyDocImpl* doc, uint indent,$/;"	f	file:
PPrintAttrs	libtidy/src/pprint.c	/^static void PPrintAttrs( TidyDocImpl* doc, uint indent, Node *node )$/;"	f	file:
PPrintCDATA	libtidy/src/pprint.c	/^static void PPrintCDATA( TidyDocImpl* doc, uint indent, Node *node )$/;"	f	file:
PPrintChar	libtidy/src/pprint.c	/^static void PPrintChar( TidyDocImpl* doc, uint c, uint mode )$/;"	f	file:
PPrintComment	libtidy/src/pprint.c	/^static void PPrintComment( TidyDocImpl* doc, uint indent, Node* node )$/;"	f	file:
PPrintDocType	libtidy/src/pprint.c	/^static void PPrintDocType( TidyDocImpl* doc, uint indent, Node *node )$/;"	f	file:
PPrintEndTag	libtidy/src/pprint.c	/^static void PPrintEndTag( TidyDocImpl* doc, uint ARG_UNUSED(mode),$/;"	f	file:
PPrintJste	libtidy/src/pprint.c	/^static void PPrintJste( TidyDocImpl* doc, uint indent, Node *node )$/;"	f	file:
PPrintPI	libtidy/src/pprint.c	/^static void PPrintPI( TidyDocImpl* doc, uint indent, Node *node )$/;"	f	file:
PPrintPhp	libtidy/src/pprint.c	/^static void PPrintPhp( TidyDocImpl* doc, uint indent, Node *node )$/;"	f	file:
PPrintScriptStyle	libtidy/src/pprint.c	/^void PPrintScriptStyle( TidyDocImpl* doc, uint mode, uint indent, Node *node )$/;"	f	file:
PPrintSection	libtidy/src/pprint.c	/^static void PPrintSection( TidyDocImpl* doc, uint indent, Node *node )$/;"	f	file:
PPrintTag	libtidy/src/pprint.c	/^static void PPrintTag( TidyDocImpl* doc,$/;"	f	file:
PPrintText	libtidy/src/pprint.c	/^static void PPrintText( TidyDocImpl* doc, uint mode, uint indent,$/;"	f	file:
PPrintTree	libtidy/src/pprint.c	/^void TY_(PPrintTree)( TidyDocImpl* doc, uint mode, uint indent, Node *node )$/;"	f
PPrintXMLTree	libtidy/src/pprint.c	/^void TY_(PPrintXMLTree)( TidyDocImpl* doc, uint mode, uint indent, Node *node )$/;"	f
PPrintXmlDecl	libtidy/src/pprint.c	/^static void PPrintXmlDecl( TidyDocImpl* doc, uint indent, Node *node )$/;"	f	file:
ParseAcc	libtidy/src/config.c	171;"	d	file:
ParseAcc	libtidy/src/config.c	173;"	d	file:
ParseAsp	libtidy/src/lexer.c	/^static Node *ParseAsp( TidyDocImpl* doc )$/;"	f	file:
ParseAttribute	libtidy/src/lexer.c	/^static tmbstr  ParseAttribute( TidyDocImpl* doc, Bool *isempty,$/;"	f	file:
ParseAttrs	libtidy/src/lexer.c	/^static AttVal* ParseAttrs( TidyDocImpl* doc, Bool *isempty )$/;"	f	file:
ParseAutoBool	libtidy/src/config.c	/^Bool ParseAutoBool( TidyDocImpl* doc, const TidyOptionImpl* entry )$/;"	f
ParseAutoBool	libtidy/src/config.c	/^static ParseProperty ParseAutoBool;$/;"	v	file:
ParseBlock	libtidy/src/parser.c	/^void TY_(ParseBlock)( TidyDocImpl* doc, Node *element, GetTokenMode mode)$/;"	f
ParseBody	libtidy/src/parser.c	/^void TY_(ParseBody)(TidyDocImpl* doc, Node *body, GetTokenMode mode)$/;"	f
ParseBool	libtidy/src/config.c	/^Bool ParseBool( TidyDocImpl* doc, const TidyOptionImpl* entry )$/;"	f
ParseBool	libtidy/src/config.c	/^static ParseProperty ParseBool;$/;"	v	file:
ParseCSS1Selector	libtidy/src/config.c	/^Bool ParseCSS1Selector( TidyDocImpl* doc, const TidyOptionImpl* option )$/;"	f
ParseCSS1Selector	libtidy/src/config.c	/^static ParseProperty ParseCSS1Selector;$/;"	v	file:
ParseCharEnc	libtidy/src/config.c	/^Bool ParseCharEnc( TidyDocImpl* doc, const TidyOptionImpl* option )$/;"	f
ParseCharEnc	libtidy/src/config.c	/^static ParseProperty ParseCharEnc;$/;"	v	file:
ParseColGroup	libtidy/src/parser.c	/^void TY_(ParseColGroup)(TidyDocImpl* doc, Node *colgroup, GetTokenMode ARG_UNUSED(mode))$/;"	f
ParseConfigFile	libtidy/src/config.c	/^int TY_(ParseConfigFile)( TidyDocImpl* doc, ctmbstr file )$/;"	f
ParseConfigFileEnc	libtidy/src/config.c	/^int TY_(ParseConfigFileEnc)( TidyDocImpl* doc, ctmbstr file, ctmbstr charenc )$/;"	f
ParseConfigOption	libtidy/src/config.c	/^Bool TY_(ParseConfigOption)( TidyDocImpl* doc, ctmbstr optnam, ctmbstr optval )$/;"	f
ParseConfigValue	libtidy/src/config.c	/^Bool TY_(ParseConfigValue)( TidyDocImpl* doc, TidyOptionId optId, ctmbstr optval )$/;"	f
ParseDefList	libtidy/src/parser.c	/^void TY_(ParseDefList)(TidyDocImpl* doc, Node *list, GetTokenMode mode)$/;"	f
ParseDocType	libtidy/src/config.c	/^Bool ParseDocType( TidyDocImpl* doc, const TidyOptionImpl* option )$/;"	f
ParseDocType	libtidy/src/config.c	/^static ParseProperty ParseDocType;$/;"	v	file:
ParseDocTypeDecl	libtidy/src/lexer.c	/^static Node *ParseDocTypeDecl(TidyDocImpl* doc)$/;"	f	file:
ParseDocument	libtidy/src/parser.c	/^void TY_(ParseDocument)(TidyDocImpl* doc)$/;"	f
ParseEmpty	libtidy/src/parser.c	/^void TY_(ParseEmpty)(TidyDocImpl* doc, Node *element, GetTokenMode mode)$/;"	f
ParseEntity	libtidy/src/lexer.c	/^static void ParseEntity( TidyDocImpl* doc, GetTokenMode mode )$/;"	f	file:
ParseFrameSet	libtidy/src/parser.c	/^void TY_(ParseFrameSet)(TidyDocImpl* doc, Node *frameset, GetTokenMode ARG_UNUSED(mode))$/;"	f
ParseHTML	libtidy/src/parser.c	/^void TY_(ParseHTML)(TidyDocImpl* doc, Node *html, GetTokenMode mode)$/;"	f
ParseHead	libtidy/src/parser.c	/^void TY_(ParseHead)(TidyDocImpl* doc, Node *head, GetTokenMode ARG_UNUSED(mode))$/;"	f
ParseInline	libtidy/src/parser.c	/^void TY_(ParseInline)( TidyDocImpl* doc, Node *element, GetTokenMode mode )$/;"	f
ParseInt	libtidy/src/config.c	/^Bool ParseInt( TidyDocImpl* doc, const TidyOptionImpl* entry )$/;"	f
ParseInt	libtidy/src/config.c	/^static ParseProperty ParseInt;$/;"	v	file:
ParseList	libtidy/src/parser.c	/^void TY_(ParseList)(TidyDocImpl* doc, Node *list, GetTokenMode ARG_UNUSED(mode))$/;"	f
ParseName	libtidy/src/config.c	/^Bool ParseName( TidyDocImpl* doc, const TidyOptionImpl* option )$/;"	f
ParseName	libtidy/src/config.c	/^static ParseProperty ParseName;$/;"	v	file:
ParseNewline	libtidy/src/config.c	/^Bool ParseNewline( TidyDocImpl* doc, const TidyOptionImpl* entry )$/;"	f
ParseNewline	libtidy/src/config.c	/^static ParseProperty ParseNewline;$/;"	v	file:
ParseNoFrames	libtidy/src/parser.c	/^void TY_(ParseNoFrames)(TidyDocImpl* doc, Node *noframes, GetTokenMode mode)$/;"	f
ParseOptGroup	libtidy/src/parser.c	/^void TY_(ParseOptGroup)(TidyDocImpl* doc, Node *field, GetTokenMode ARG_UNUSED(mode))$/;"	f
ParsePhp	libtidy/src/lexer.c	/^static Node *ParsePhp( TidyDocImpl* doc )$/;"	f	file:
ParsePre	libtidy/src/parser.c	/^void TY_(ParsePre)( TidyDocImpl* doc, Node *pre, GetTokenMode ARG_UNUSED(mode) )$/;"	f
ParseRepeatAttr	libtidy/src/config.c	/^Bool ParseRepeatAttr( TidyDocImpl* doc, const TidyOptionImpl* option )$/;"	f
ParseRepeatAttr	libtidy/src/config.c	/^static ParseProperty ParseRepeatAttr;$/;"	v	file:
ParseRow	libtidy/src/parser.c	/^void TY_(ParseRow)(TidyDocImpl* doc, Node *row, GetTokenMode ARG_UNUSED(mode))$/;"	f
ParseRowGroup	libtidy/src/parser.c	/^void TY_(ParseRowGroup)(TidyDocImpl* doc, Node *rowgroup, GetTokenMode ARG_UNUSED(mode))$/;"	f
ParseScript	libtidy/src/parser.c	/^void TY_(ParseScript)(TidyDocImpl* doc, Node *script, GetTokenMode ARG_UNUSED(mode))$/;"	f
ParseSelect	libtidy/src/parser.c	/^void TY_(ParseSelect)(TidyDocImpl* doc, Node *field, GetTokenMode ARG_UNUSED(mode))$/;"	f
ParseServerInstruction	libtidy/src/lexer.c	/^static int ParseServerInstruction( TidyDocImpl* doc )$/;"	f	file:
ParseSorter	libtidy/src/config.c	/^Bool ParseSorter( TidyDocImpl* doc, const TidyOptionImpl* option )$/;"	f
ParseSorter	libtidy/src/config.c	/^static ParseProperty ParseSorter;$/;"	v	file:
ParseString	libtidy/src/config.c	/^Bool ParseString( TidyDocImpl* doc, const TidyOptionImpl* option )$/;"	f
ParseString	libtidy/src/config.c	/^static ParseProperty ParseString;$/;"	v	file:
ParseTableTag	libtidy/src/parser.c	/^void TY_(ParseTableTag)(TidyDocImpl* doc, Node *table, GetTokenMode ARG_UNUSED(mode))$/;"	f
ParseTag	libtidy/src/parser.c	/^static void ParseTag( TidyDocImpl* doc, Node *node, GetTokenMode mode )$/;"	f	file:
ParseTagName	libtidy/src/lexer.c	/^static tmbchar ParseTagName( TidyDocImpl* doc )$/;"	f	file:
ParseTagNames	libtidy/src/config.c	/^Bool ParseTagNames( TidyDocImpl* doc, const TidyOptionImpl* option )$/;"	f
ParseTagNames	libtidy/src/config.c	/^static ParseProperty ParseTagNames;$/;"	v	file:
ParseText	libtidy/src/parser.c	/^void TY_(ParseText)(TidyDocImpl* doc, Node *field, GetTokenMode mode)$/;"	f
ParseTitle	libtidy/src/parser.c	/^void TY_(ParseTitle)(TidyDocImpl* doc, Node *title, GetTokenMode ARG_UNUSED(mode))$/;"	f
ParseTriState	libtidy/src/config.c	/^static Bool ParseTriState( TidyTriState theState, TidyDocImpl* doc,$/;"	f	file:
ParseValue	libtidy/src/lexer.c	/^static tmbstr ParseValue( TidyDocImpl* doc, ctmbstr name,$/;"	f	file:
ParseXMLDocument	libtidy/src/parser.c	/^void TY_(ParseXMLDocument)(TidyDocImpl* doc)$/;"	f
ParseXMLElement	libtidy/src/parser.c	/^static void ParseXMLElement(TidyDocImpl* doc, Node *element, GetTokenMode mode)$/;"	f	file:
PhpToken	libtidy/src/lexer.c	1259;"	d	file:
PopChar	libtidy/src/streamio.c	/^static uint PopChar( StreamIn *in )$/;"	f	file:
PopIStack	libtidy/src/istack.c	/^static void PopIStack( TidyDocImpl* doc )$/;"	f	file:
PopIStackUntil	libtidy/src/istack.c	/^static void PopIStackUntil( TidyDocImpl* doc, TidyTagId tid )$/;"	f	file:
PopInline	libtidy/src/istack.c	/^void TY_(PopInline)( TidyDocImpl* doc, Node *node )$/;"	f
PopLastPos	libtidy/src/streamio.c	/^static void PopLastPos( StreamIn *in )$/;"	f	file:
PrintAllowedValues	libtidy/console/tidy.c	/^void PrintAllowedValues( TidyOption topt, const OptionDesc *d )$/;"	f	file:
PrintAllowedValuesFromPick	libtidy/console/tidy.c	/^void PrintAllowedValuesFromPick( TidyOption topt )$/;"	f	file:
PrintBody	libtidy/src/pprint.c	/^void TY_(PrintBody)( TidyDocImpl* doc )$/;"	f
ProgrammaticObjects	libtidy/src/access.c	/^static void ProgrammaticObjects( TidyDocImpl* doc, Node* node )$/;"	f	file:
PruneSection	libtidy/src/clean.c	/^static Node* PruneSection( TidyDocImpl* doc, Node *node )$/;"	f	file:
PurgeWord2000Attributes	libtidy/src/clean.c	/^static void PurgeWord2000Attributes( TidyDocImpl* doc, Node* node )$/;"	f	file:
PushInline	libtidy/src/istack.c	/^void TY_(PushInline)( TidyDocImpl* doc, Node *node )$/;"	f
PutByte	libtidy/src/streamio.c	/^static void PutByte( uint byteValue, StreamOut* out )$/;"	f	file:
PutUTF8	libtidy/src/utf8.c	/^tmbstr TY_(PutUTF8)( tmbstr buf, uint c )$/;"	f
REPARSE_USERTAGS	libtidy/src/config.c	493;"	d	file:
ReadBOMEncoding	libtidy/src/streamio.c	/^int TY_(ReadBOMEncoding)(StreamIn *in)$/;"	f
ReadByte	libtidy/src/streamio.c	/^static uint ReadByte( StreamIn* in )$/;"	f	file:
ReadChar	libtidy/console/tab2space.c	/^static int ReadChar(Stream *in)$/;"	f	file:
ReadChar	libtidy/src/streamio.c	/^uint TY_(ReadChar)( StreamIn *in )$/;"	f
ReadCharFromStream	libtidy/src/streamio.c	/^static uint ReadCharFromStream( StreamIn* in )$/;"	f	file:
ReadFile	libtidy/console/tab2space.c	/^static Stream *ReadFile(FILE *fin)$/;"	f	file:
ReleaseDate	libtidy/src/localize.c	/^ctmbstr TY_(ReleaseDate)(void)$/;"	f
ReleaseStreamOut	libtidy/src/streamio.c	/^void  TY_(ReleaseStreamOut)( TidyDocImpl *doc,  StreamOut* out )$/;"	f
RemoveAnchorByNode	libtidy/src/attrs.c	/^void TY_(RemoveAnchorByNode)( TidyDocImpl* doc, Node *node )$/;"	f
RemoveAttribute	libtidy/src/lexer.c	/^void TY_(RemoveAttribute)( TidyDocImpl* doc, Node *node, AttVal *attr )$/;"	f
RemoveNode	libtidy/src/parser.c	/^Node *TY_(RemoveNode)(Node *node)$/;"	f
RenameElem	libtidy/src/clean.c	/^static void RenameElem( TidyDocImpl* doc, Node* node, TidyTagId tid )$/;"	f	file:
RepairAttrValue	libtidy/src/attrs.c	/^AttVal* TY_(RepairAttrValue)(TidyDocImpl* doc, Node* node, ctmbstr name, ctmbstr value)$/;"	f
RepairDuplicateAttributes	libtidy/src/attrs.c	/^void TY_(RepairDuplicateAttributes)( TidyDocImpl* doc, Node *node, Bool isXml )$/;"	f
ReparseTagDecls	libtidy/src/config.c	/^static void ReparseTagDecls( TidyDocImpl* doc, uint changedUserTags  )$/;"	f	file:
ReparseTagType	libtidy/src/config.c	/^static void ReparseTagType( TidyDocImpl* doc, TidyOptionId optId )$/;"	f	file:
ReplaceObsoleteElements	libtidy/src/parser.c	/^static void ReplaceObsoleteElements(TidyDocImpl* doc, Node* node)$/;"	f	file:
ReplacePreformattedSpaces	libtidy/src/clean.c	/^void TY_(ReplacePreformattedSpaces)(TidyDocImpl* doc, Node* node)$/;"	f
ReplacementCharEncoding	libtidy/src/streamio.c	/^const int TY_(ReplacementCharEncoding) = DFLT_REPL_CHARENC;$/;"	v
ReportAccessError	libtidy/src/localize.c	/^void TY_(ReportAccessError)( TidyDocImpl* doc, Node* node, uint code )$/;"	f
ReportAccessWarning	libtidy/src/localize.c	/^void TY_(ReportAccessWarning)( TidyDocImpl* doc, Node* node, uint code )$/;"	f
ReportAttrError	libtidy/src/localize.c	/^void TY_(ReportAttrError)(TidyDocImpl* doc, Node *node, AttVal *av, uint code)$/;"	f
ReportBadArgument	libtidy/src/localize.c	/^void TY_(ReportBadArgument)( TidyDocImpl* doc, ctmbstr option )$/;"	f
ReportEncodingError	libtidy/src/localize.c	/^void TY_(ReportEncodingError)(TidyDocImpl* doc, uint code, uint c, Bool discarded)$/;"	f
ReportEncodingWarning	libtidy/src/localize.c	/^void TY_(ReportEncodingWarning)(TidyDocImpl* doc, uint code, uint encoding)$/;"	f
ReportEntityError	libtidy/src/localize.c	/^void TY_(ReportEntityError)( TidyDocImpl* doc, uint code, ctmbstr entity,$/;"	f
ReportError	libtidy/src/localize.c	/^void TY_(ReportError)(TidyDocImpl* doc, Node *element, Node *node, uint code)$/;"	f
ReportFatal	libtidy/src/localize.c	/^void TY_(ReportFatal)( TidyDocImpl* doc, Node *element, Node *node, uint code)$/;"	f
ReportMarkupVersion	libtidy/src/localize.c	/^void TY_(ReportMarkupVersion)( TidyDocImpl* doc )$/;"	f
ReportMissingAttr	libtidy/src/localize.c	/^void TY_(ReportMissingAttr)( TidyDocImpl* doc, Node* node, ctmbstr name )$/;"	f
ReportNotice	libtidy/src/localize.c	/^void TY_(ReportNotice)(TidyDocImpl* doc, Node *element, Node *node, uint code)$/;"	f
ReportNumWarnings	libtidy/src/localize.c	/^void TY_(ReportNumWarnings)( TidyDocImpl* doc )$/;"	f
ReportPosition	libtidy/src/localize.c	/^static char* ReportPosition(TidyDocImpl* doc, int line, int col, char* buf, size_t count)$/;"	f	file:
ReportUnknownOption	libtidy/src/localize.c	/^void TY_(ReportUnknownOption)( TidyDocImpl* doc, ctmbstr option )$/;"	f
ReportWarning	libtidy/src/localize.c	/^void TY_(ReportWarning)(TidyDocImpl* doc, Node *element, Node *node, uint code)$/;"	f
ResetConfigToDefault	libtidy/src/config.c	/^void TY_(ResetConfigToDefault)( TidyDocImpl* doc )$/;"	f
ResetConfigToSnapshot	libtidy/src/config.c	/^void TY_(ResetConfigToSnapshot)( TidyDocImpl* doc )$/;"	f
ResetLine	libtidy/src/pprint.c	/^static void ResetLine( TidyPrintImpl* pprint )$/;"	f	file:
ResetLineAfterWrap	libtidy/src/pprint.c	/^static void ResetLineAfterWrap( TidyPrintImpl* pprint )$/;"	f	file:
ResetOptionToDefault	libtidy/src/config.c	/^Bool TY_(ResetOptionToDefault)( TidyDocImpl* doc, TidyOptionId optId )$/;"	f
RestoreLastPos	libtidy/src/streamio.c	/^static void RestoreLastPos( StreamIn *in )$/;"	f	file:
ST	libtidy/src/config.c	162;"	d	file:
SaveConfigFile	libtidy/src/config.c	/^int  TY_(SaveConfigFile)( TidyDocImpl* doc, ctmbstr cfgfil )$/;"	f
SaveConfigSink	libtidy/src/config.c	/^int  TY_(SaveConfigSink)( TidyDocImpl* doc, TidyOutputSink* sink )$/;"	f
SaveConfigToStream	libtidy/src/config.c	/^static int  SaveConfigToStream( TidyDocImpl* doc, StreamOut* out )$/;"	f	file:
SaveLastPos	libtidy/src/streamio.c	/^static void SaveLastPos( StreamIn *in )$/;"	f	file:
SectionToken	libtidy/src/lexer.c	1261;"	d	file:
SetInAttrVal	libtidy/src/pprint.c	/^static int SetInAttrVal( TidyPrintImpl* pprint )$/;"	f	file:
SetLexerLocus	libtidy/src/lexer.c	/^static void SetLexerLocus( TidyDocImpl* doc, Lexer *lexer )$/;"	f	file:
SetOptionBool	libtidy/src/config.c	/^Bool TY_(SetOptionBool)( TidyDocImpl* doc, TidyOptionId optId, Bool val )$/;"	f
SetOptionInt	libtidy/src/config.c	/^Bool TY_(SetOptionInt)( TidyDocImpl* doc, TidyOptionId optId, ulong val )$/;"	f
SetOptionValue	libtidy/src/config.c	/^static Bool SetOptionValue( TidyDocImpl* doc, TidyOptionId optId, ctmbstr val )$/;"	f	file:
SetWrap	libtidy/src/pprint.c	/^static Bool SetWrap( TidyDocImpl* doc, uint indent )$/;"	f	file:
SetWrapAttr	libtidy/src/pprint.c	/^static Bool SetWrapAttr( TidyDocImpl* doc,$/;"	f	file:
SetXHTMLDocType	libtidy/src/lexer.c	/^Bool TY_(SetXHTMLDocType)( TidyDocImpl* doc )$/;"	f
ShouldIndent	libtidy/src/pprint.c	/^static Bool ShouldIndent( TidyDocImpl* doc, Node *node )$/;"	f	file:
SingleSpace	libtidy/src/clean.c	/^static Bool SingleSpace( Lexer* lexer, Node* node )$/;"	f	file:
SkipWhite	libtidy/src/config.c	/^static tchar SkipWhite( TidyConfigImpl* config )$/;"	f	file:
SortAttVal	libtidy/src/attrs.c	/^AttVal *SortAttVal( AttVal *list, TidyAttrSortStrategy strat)$/;"	f	file:
SortAttributes	libtidy/src/attrs.c	/^void TY_(SortAttributes)(Node* node, TidyAttrSortStrategy strat)$/;"	f
SplitSurrogatePair	libtidy/src/utf8.c	/^Bool   TY_(SplitSurrogatePair)( tchar utf16, tchar* low, tchar* high )$/;"	f
StdErrOutput	libtidy/src/streamio.c	/^StreamOut* TY_(StdErrOutput)(void)$/;"	f
StoreOriginalTextInToken	libtidy/src/lexer.c	/^void StoreOriginalTextInToken(TidyDocImpl* doc, Node* node, uint count)$/;"	f
Stream	libtidy/console/tab2space.c	/^} Stream;$/;"	t	typeref:struct:__anon10	file:
StripOnlyChild	libtidy/src/clean.c	/^static void StripOnlyChild(TidyDocImpl* doc, Node *node)$/;"	f	file:
StripSpan	libtidy/src/clean.c	/^static Node* StripSpan( TidyDocImpl* doc, Node* span )$/;"	f	file:
Style2Rule	libtidy/src/clean.c	/^static void Style2Rule( TidyDocImpl* doc, Node *node)$/;"	f	file:
SwitchInline	libtidy/src/istack.c	/^Bool TY_(SwitchInline)( TidyDocImpl* doc, Node* element, Node* node )$/;"	f
Symbol2Unicode	libtidy/src/streamio.c	/^static const uint Symbol2Unicode[] = $/;"	v	file:
TABSIZE	libtidy/console/tab2space.c	9;"	d	file:
TC_INBUFSIZE	libtidy/src/iconvtc.c	18;"	d	file:
TC_INBUFSIZE	libtidy/src/win32tc.c	30;"	d	file:
TC_OUTBUFSIZE	libtidy/src/iconvtc.c	21;"	d	file:
TC_OUTBUFSIZE	libtidy/src/win32tc.c	33;"	d	file:
TEST_USERTAGS	libtidy/src/config.c	472;"	d	file:
TIDY_ERROR	lib/HTML/Tidy.pm	/^use constant TIDY_ERROR   => 3;$/;"	c
TIDY_INFO	lib/HTML/Tidy.pm	/^use constant TIDY_INFO    => 1;$/;"	c
TIDY_MAX_NAME	libtidy/src/config.c	773;"	d	file:
TIDY_WARNING	lib/HTML/Tidy.pm	/^use constant TIDY_WARNING => 2;$/;"	c
TY_I64	libtidy/src/mappedio.c	287;"	d	file:
TY_I64	libtidy/src/mappedio.c	289;"	d	file:
TY_I64	libtidy/src/mappedio.c	290;"	d	file:
TableBgColor	libtidy/src/clean.c	/^static void TableBgColor( TidyDocImpl* doc, Node* node )$/;"	f	file:
TagToString	libtidy/src/localize.c	/^static char* TagToString(Node* tag, char* buf, size_t count)$/;"	f	file:
TagToken	libtidy/src/lexer.c	/^static Node* TagToken( TidyDocImpl* doc, NodeType type )$/;"	f	file:
TakeConfigSnapshot	libtidy/src/config.c	/^void TY_(TakeConfigSnapshot)( TidyDocImpl* doc )$/;"	f
TextAlign	libtidy/src/clean.c	/^static void TextAlign( TidyDocImpl* doc, Node* node )$/;"	f	file:
TextEndsWithNewline	libtidy/src/pprint.c	/^static int TextEndsWithNewline(Lexer *lexer, Node *node, uint mode )$/;"	f	file:
TextNodeEndWithSpace	libtidy/src/pprint.c	/^Bool TY_(TextNodeEndWithSpace)( Lexer *lexer, Node *node )$/;"	f
TextStartsWithWhitespace	libtidy/src/pprint.c	/^static int TextStartsWithWhitespace( Lexer *lexer, Node *node, uint start, uint mode )$/;"	f	file:
TextToken	libtidy/src/lexer.c	/^Node* TY_(TextToken)( Lexer *lexer )$/;"	f
TidyAsciiCharsLinks	libtidy/src/localize.c	/^static const TidyOptionId TidyAsciiCharsLinks[] =$/;"	v	file:
TidyBlockTagsLinks	libtidy/src/localize.c	/^static const TidyOptionId TidyBlockTagsLinks[] =$/;"	v	file:
TidyCharEncodingLinks	libtidy/src/localize.c	/^static const TidyOptionId TidyCharEncodingLinks[] =$/;"	v	file:
TidyDropFontTagsLinks	libtidy/src/localize.c	/^static const TidyOptionId TidyDropFontTagsLinks[] =$/;"	v	file:
TidyDuplicateAttrsLinks	libtidy/src/localize.c	/^static const TidyOptionId TidyDuplicateAttrsLinks[] =$/;"	v	file:
TidyEmptyTagsLinks	libtidy/src/localize.c	/^static const TidyOptionId TidyEmptyTagsLinks[] =$/;"	v	file:
TidyErrFileLinks	libtidy/src/localize.c	/^static const TidyOptionId TidyErrFileLinks[] =$/;"	v	file:
TidyInCharEncodingLinks	libtidy/src/localize.c	/^static const TidyOptionId TidyInCharEncodingLinks[] =$/;"	v	file:
TidyIndentContentLinks	libtidy/src/localize.c	/^static const TidyOptionId TidyIndentContentLinks[] =$/;"	v	file:
TidyIndentSpacesLinks	libtidy/src/localize.c	/^static const TidyOptionId TidyIndentSpacesLinks[] =$/;"	v	file:
TidyInlineTagsLinks	libtidy/src/localize.c	/^static const TidyOptionId TidyInlineTagsLinks[] =$/;"	v	file:
TidyJoinClassesLinks	libtidy/src/localize.c	/^static const TidyOptionId TidyJoinClassesLinks[] =$/;"	v	file:
TidyJoinStylesLinks	libtidy/src/localize.c	/^static const TidyOptionId TidyJoinStylesLinks[] =$/;"	v	file:
TidyMakeCleanTagsLinks	libtidy/src/localize.c	/^static const TidyOptionId TidyMakeCleanTagsLinks[] =$/;"	v	file:
TidyMergeDivsLinks	libtidy/src/localize.c	/^static const TidyOptionId TidyMergeDivsLinks[] =$/;"	v	file:
TidyMergeSpansLinks	libtidy/src/localize.c	/^static const TidyOptionId TidyMergeSpansLinks[] =$/;"	v	file:
TidyNumEntitiesLinks	libtidy/src/localize.c	/^static const TidyOptionId TidyNumEntitiesLinks[] =$/;"	v	file:
TidyOutCharEncodingLinks	libtidy/src/localize.c	/^static const TidyOptionId TidyOutCharEncodingLinks[] =$/;"	v	file:
TidyOutFileLinks	libtidy/src/localize.c	/^static const TidyOptionId TidyOutFileLinks[] =$/;"	v	file:
TidyPreTagsLinks	libtidy/src/localize.c	/^static const TidyOptionId TidyPreTagsLinks[] =$/;"	v	file:
TidyWrapAttValsLinks	libtidy/src/localize.c	/^static const TidyOptionId TidyWrapAttValsLinks[] =$/;"	v	file:
TidyWrapScriptletsLinks	libtidy/src/localize.c	/^static const TidyOptionId TidyWrapScriptletsLinks[] =$/;"	v	file:
TidyXmlDeclLinks	libtidy/src/localize.c	/^static const TidyOptionId TidyXmlDeclLinks[] =$/;"	v	file:
ToLower	libtidy/src/lexer.c	/^uint TY_(ToLower)(uint c)$/;"	f
ToUpper	libtidy/src/lexer.c	/^uint TY_(ToUpper)(uint c)$/;"	f
ToggleInString	libtidy/src/pprint.c	/^static int ToggleInString( TidyPrintImpl* pprint )$/;"	f	file:
TrimEmptyElement	libtidy/src/parser.c	/^Node *TY_(TrimEmptyElement)( TidyDocImpl* doc, Node *element )$/;"	f
TrimInitialSpace	libtidy/src/parser.c	/^static void TrimInitialSpace( TidyDocImpl* doc, Node *element, Node *text )$/;"	f	file:
TrimSpaces	libtidy/src/parser.c	/^static void TrimSpaces( TidyDocImpl* doc, Node *element)$/;"	f	file:
TrimTrailingSpace	libtidy/src/parser.c	/^static void TrimTrailingSpace( TidyDocImpl* doc, Node *element, Node *last )$/;"	f	file:
UC00	libtidy/src/pprint.c	/^  UC00, \/* None                       *\/$/;"	e	enum:__anon1	file:
UCPC	libtidy/src/pprint.c	/^  UCPC, \/* Punctuation, Connector     *\/$/;"	e	enum:__anon1	file:
UCPD	libtidy/src/pprint.c	/^  UCPD, \/* Punctuation, Dash          *\/$/;"	e	enum:__anon1	file:
UCPE	libtidy/src/pprint.c	/^  UCPE, \/* Punctuation, Close         *\/$/;"	e	enum:__anon1	file:
UCPF	libtidy/src/pprint.c	/^  UCPF, \/* Punctuation, Final quote   *\/$/;"	e	enum:__anon1	file:
UCPI	libtidy/src/pprint.c	/^  UCPI, \/* Punctuation, Initial quote *\/$/;"	e	enum:__anon1	file:
UCPO	libtidy/src/pprint.c	/^  UCPO, \/* Punctuation, Other         *\/$/;"	e	enum:__anon1	file:
UCPS	libtidy/src/pprint.c	/^  UCPS, \/* Punctuation, Open          *\/$/;"	e	enum:__anon1	file:
UCZL	libtidy/src/pprint.c	/^  UCZL, \/* Separator, Line            *\/$/;"	e	enum:__anon1	file:
UCZP	libtidy/src/pprint.c	/^  UCZP  \/* Separator, Paragraph       *\/$/;"	e	enum:__anon1	file:
UCZS	libtidy/src/pprint.c	/^  UCZS, \/* Separator, Space           *\/$/;"	e	enum:__anon1	file:
UNIX_LF	libtidy/console/tab2space.c	12;"	d	file:
UngetByte	libtidy/src/streamio.c	/^static void UngetByte( StreamIn* in, uint byteValue )$/;"	f	file:
UngetChar	libtidy/src/streamio.c	/^void TY_(UngetChar)( uint c, StreamIn *in )$/;"	f
UngetToken	libtidy/src/lexer.c	/^void TY_(UngetToken)( TidyDocImpl* doc )$/;"	f
UnicodeCategory	libtidy/src/pprint.c	/^} UnicodeCategory;$/;"	t	typeref:enum:__anon1	file:
UpdateCount	libtidy/src/localize.c	/^static Bool UpdateCount( TidyDocImpl* doc, TidyReportLevel level )$/;"	f	file:
UserInput	libtidy/src/streamio.c	/^StreamIn* TY_(UserInput)( TidyDocImpl* doc, TidyInputSource* source, int encoding )$/;"	f
UserOutput	libtidy/src/streamio.c	/^StreamOut* TY_(UserOutput)( TidyDocImpl *doc, TidyOutputSink* sink, int encoding, uint nl )$/;"	f
VB_COMMENT_END	libtidy/src/pprint.c	/^static ctmbstr VB_COMMENT_END        = "";$/;"	v	file:
VB_COMMENT_START	libtidy/src/pprint.c	/^static ctmbstr VB_COMMENT_START      = "\\'";$/;"	v	file:
VC_EXTRALEAN	libtidy/src/win32tc.c	18;"	d	file:
VC_EXTRALEAN	libtidy/src/win32tc.c	27;"	d	file:
VERS_ELEM_A	libtidy/src/tags.c	32;"	d	file:
VERS_ELEM_ABBR	libtidy/src/tags.c	33;"	d	file:
VERS_ELEM_ACRONYM	libtidy/src/tags.c	34;"	d	file:
VERS_ELEM_ADDRESS	libtidy/src/tags.c	35;"	d	file:
VERS_ELEM_APPLET	libtidy/src/tags.c	36;"	d	file:
VERS_ELEM_AREA	libtidy/src/tags.c	37;"	d	file:
VERS_ELEM_B	libtidy/src/tags.c	38;"	d	file:
VERS_ELEM_BASE	libtidy/src/tags.c	39;"	d	file:
VERS_ELEM_BASEFONT	libtidy/src/tags.c	40;"	d	file:
VERS_ELEM_BDO	libtidy/src/tags.c	41;"	d	file:
VERS_ELEM_BIG	libtidy/src/tags.c	42;"	d	file:
VERS_ELEM_BLOCKQUOTE	libtidy/src/tags.c	43;"	d	file:
VERS_ELEM_BODY	libtidy/src/tags.c	44;"	d	file:
VERS_ELEM_BR	libtidy/src/tags.c	45;"	d	file:
VERS_ELEM_BUTTON	libtidy/src/tags.c	46;"	d	file:
VERS_ELEM_CAPTION	libtidy/src/tags.c	47;"	d	file:
VERS_ELEM_CENTER	libtidy/src/tags.c	48;"	d	file:
VERS_ELEM_CITE	libtidy/src/tags.c	49;"	d	file:
VERS_ELEM_CODE	libtidy/src/tags.c	50;"	d	file:
VERS_ELEM_COL	libtidy/src/tags.c	51;"	d	file:
VERS_ELEM_COLGROUP	libtidy/src/tags.c	52;"	d	file:
VERS_ELEM_DD	libtidy/src/tags.c	53;"	d	file:
VERS_ELEM_DEL	libtidy/src/tags.c	54;"	d	file:
VERS_ELEM_DFN	libtidy/src/tags.c	55;"	d	file:
VERS_ELEM_DIR	libtidy/src/tags.c	56;"	d	file:
VERS_ELEM_DIV	libtidy/src/tags.c	57;"	d	file:
VERS_ELEM_DL	libtidy/src/tags.c	58;"	d	file:
VERS_ELEM_DT	libtidy/src/tags.c	59;"	d	file:
VERS_ELEM_EM	libtidy/src/tags.c	60;"	d	file:
VERS_ELEM_FIELDSET	libtidy/src/tags.c	61;"	d	file:
VERS_ELEM_FONT	libtidy/src/tags.c	62;"	d	file:
VERS_ELEM_FORM	libtidy/src/tags.c	63;"	d	file:
VERS_ELEM_FRAME	libtidy/src/tags.c	64;"	d	file:
VERS_ELEM_FRAMESET	libtidy/src/tags.c	65;"	d	file:
VERS_ELEM_H1	libtidy/src/tags.c	66;"	d	file:
VERS_ELEM_H2	libtidy/src/tags.c	67;"	d	file:
VERS_ELEM_H3	libtidy/src/tags.c	68;"	d	file:
VERS_ELEM_H4	libtidy/src/tags.c	69;"	d	file:
VERS_ELEM_H5	libtidy/src/tags.c	70;"	d	file:
VERS_ELEM_H6	libtidy/src/tags.c	71;"	d	file:
VERS_ELEM_HEAD	libtidy/src/tags.c	72;"	d	file:
VERS_ELEM_HR	libtidy/src/tags.c	73;"	d	file:
VERS_ELEM_HTML	libtidy/src/tags.c	74;"	d	file:
VERS_ELEM_I	libtidy/src/tags.c	75;"	d	file:
VERS_ELEM_IFRAME	libtidy/src/tags.c	76;"	d	file:
VERS_ELEM_IMG	libtidy/src/tags.c	77;"	d	file:
VERS_ELEM_INPUT	libtidy/src/tags.c	78;"	d	file:
VERS_ELEM_INS	libtidy/src/tags.c	79;"	d	file:
VERS_ELEM_ISINDEX	libtidy/src/tags.c	80;"	d	file:
VERS_ELEM_KBD	libtidy/src/tags.c	81;"	d	file:
VERS_ELEM_LABEL	libtidy/src/tags.c	82;"	d	file:
VERS_ELEM_LEGEND	libtidy/src/tags.c	83;"	d	file:
VERS_ELEM_LI	libtidy/src/tags.c	84;"	d	file:
VERS_ELEM_LINK	libtidy/src/tags.c	85;"	d	file:
VERS_ELEM_LISTING	libtidy/src/tags.c	86;"	d	file:
VERS_ELEM_MAP	libtidy/src/tags.c	87;"	d	file:
VERS_ELEM_MENU	libtidy/src/tags.c	88;"	d	file:
VERS_ELEM_META	libtidy/src/tags.c	89;"	d	file:
VERS_ELEM_NEXTID	libtidy/src/tags.c	90;"	d	file:
VERS_ELEM_NOFRAMES	libtidy/src/tags.c	91;"	d	file:
VERS_ELEM_NOSCRIPT	libtidy/src/tags.c	92;"	d	file:
VERS_ELEM_OBJECT	libtidy/src/tags.c	93;"	d	file:
VERS_ELEM_OL	libtidy/src/tags.c	94;"	d	file:
VERS_ELEM_OPTGROUP	libtidy/src/tags.c	95;"	d	file:
VERS_ELEM_OPTION	libtidy/src/tags.c	96;"	d	file:
VERS_ELEM_P	libtidy/src/tags.c	97;"	d	file:
VERS_ELEM_PARAM	libtidy/src/tags.c	98;"	d	file:
VERS_ELEM_PLAINTEXT	libtidy/src/tags.c	99;"	d	file:
VERS_ELEM_PRE	libtidy/src/tags.c	100;"	d	file:
VERS_ELEM_Q	libtidy/src/tags.c	101;"	d	file:
VERS_ELEM_RB	libtidy/src/tags.c	102;"	d	file:
VERS_ELEM_RBC	libtidy/src/tags.c	103;"	d	file:
VERS_ELEM_RP	libtidy/src/tags.c	104;"	d	file:
VERS_ELEM_RT	libtidy/src/tags.c	105;"	d	file:
VERS_ELEM_RTC	libtidy/src/tags.c	106;"	d	file:
VERS_ELEM_RUBY	libtidy/src/tags.c	107;"	d	file:
VERS_ELEM_S	libtidy/src/tags.c	108;"	d	file:
VERS_ELEM_SAMP	libtidy/src/tags.c	109;"	d	file:
VERS_ELEM_SCRIPT	libtidy/src/tags.c	110;"	d	file:
VERS_ELEM_SELECT	libtidy/src/tags.c	111;"	d	file:
VERS_ELEM_SMALL	libtidy/src/tags.c	112;"	d	file:
VERS_ELEM_SPAN	libtidy/src/tags.c	113;"	d	file:
VERS_ELEM_STRIKE	libtidy/src/tags.c	114;"	d	file:
VERS_ELEM_STRONG	libtidy/src/tags.c	115;"	d	file:
VERS_ELEM_STYLE	libtidy/src/tags.c	116;"	d	file:
VERS_ELEM_SUB	libtidy/src/tags.c	117;"	d	file:
VERS_ELEM_SUP	libtidy/src/tags.c	118;"	d	file:
VERS_ELEM_TABLE	libtidy/src/tags.c	119;"	d	file:
VERS_ELEM_TBODY	libtidy/src/tags.c	120;"	d	file:
VERS_ELEM_TD	libtidy/src/tags.c	121;"	d	file:
VERS_ELEM_TEXTAREA	libtidy/src/tags.c	122;"	d	file:
VERS_ELEM_TFOOT	libtidy/src/tags.c	123;"	d	file:
VERS_ELEM_TH	libtidy/src/tags.c	124;"	d	file:
VERS_ELEM_THEAD	libtidy/src/tags.c	125;"	d	file:
VERS_ELEM_TITLE	libtidy/src/tags.c	126;"	d	file:
VERS_ELEM_TR	libtidy/src/tags.c	127;"	d	file:
VERS_ELEM_TT	libtidy/src/tags.c	128;"	d	file:
VERS_ELEM_U	libtidy/src/tags.c	129;"	d	file:
VERS_ELEM_UL	libtidy/src/tags.c	130;"	d	file:
VERS_ELEM_VAR	libtidy/src/tags.c	131;"	d	file:
VERS_ELEM_XMP	libtidy/src/tags.c	132;"	d	file:
VerifyHTTPEquiv	libtidy/src/clean.c	/^void TY_(VerifyHTTPEquiv)(TidyDocImpl* doc, Node *head)$/;"	f
W3C_Doctypes	libtidy/src/lexer.c	/^} const W3C_Doctypes[] =$/;"	v	file:
WARNINGS_ONLY	t/ignore.t	/^WARNINGS_ONLY: {$/;"	l
WITHOUT_LINE_NUMBERS	t/message.t	/^WITHOUT_LINE_NUMBERS: {$/;"	l
WITH_LINE_NUMBERS	t/message.t	/^WITH_LINE_NUMBERS: {$/;"	l
WantIndent	libtidy/src/pprint.c	/^static Bool WantIndent( TidyDocImpl* doc )$/;"	f	file:
WarnMissingSIInEmittedDocType	libtidy/src/lexer.c	/^Bool TY_(WarnMissingSIInEmittedDocType)( TidyDocImpl* doc )$/;"	f
WbrToSpace	libtidy/src/clean.c	/^void TY_(WbrToSpace)(TidyDocImpl* doc, Node* node)$/;"	f
Win2Unicode	libtidy/src/streamio.c	/^static const uint Win2Unicode[32] =$/;"	v	file:
Win32MLangGetCPFromName	libtidy/src/win32tc.c	/^uint TY_(Win32MLangGetCPFromName)(TidyAllocator *allocator, ctmbstr encoding)$/;"	f
Win32MLangGetChar	libtidy/src/win32tc.c	/^int TY_(Win32MLangGetChar)(byte firstByte, StreamIn * in, uint * bytesRead)$/;"	f
Win32MLangInitInputTranscoder	libtidy/src/win32tc.c	/^Bool TY_(Win32MLangInitInputTranscoder)(StreamIn * in, uint wincp)$/;"	f
Win32MLangIsConvertible	libtidy/src/win32tc.c	/^Bool Win32MLangIsConvertible(tchar c, StreamOut * out)$/;"	f
Win32MLangPutChar	libtidy/src/win32tc.c	/^void Win32MLangPutChar(tchar c, StreamOut * out, uint * bytesWritten)$/;"	f
Win32MLangUninitInputTranscoder	libtidy/src/win32tc.c	/^void TY_(Win32MLangUninitInputTranscoder)(StreamIn * in)$/;"	f
WrapAfter	libtidy/src/pprint.c	/^    WrapAfter$/;"	e	enum:__anon2	file:
WrapAttrVal	libtidy/src/pprint.c	/^static void WrapAttrVal( TidyDocImpl* doc )$/;"	f	file:
WrapBefore	libtidy/src/pprint.c	/^    WrapBefore,$/;"	e	enum:__anon2	file:
WrapLine	libtidy/src/pprint.c	/^static void WrapLine( TidyDocImpl* doc )$/;"	f	file:
WrapOff	libtidy/src/pprint.c	/^static uint  WrapOff( TidyDocImpl* doc )$/;"	f	file:
WrapOffCond	libtidy/src/pprint.c	/^static uint  WrapOffCond( TidyDocImpl* doc, Bool onoff )$/;"	f	file:
WrapOn	libtidy/src/pprint.c	/^static void  WrapOn( TidyDocImpl* doc, uint saveWrap )$/;"	f	file:
WrapPoint	libtidy/src/pprint.c	/^} WrapPoint;$/;"	t	typeref:enum:__anon2	file:
WriteChar	libtidy/src/streamio.c	/^void TY_(WriteChar)( uint c, StreamOut* out )$/;"	f
WriteFile	libtidy/console/tab2space.c	/^static void WriteFile(Stream *in, FILE *fout)$/;"	f	file:
WriteOptionBool	libtidy/src/config.c	/^static int  WriteOptionBool( const TidyOptionImpl* option, Bool bval, StreamOut* out )$/;"	f	file:
WriteOptionInt	libtidy/src/config.c	/^static int  WriteOptionInt( const TidyOptionImpl* option, uint ival, StreamOut* out )$/;"	f	file:
WriteOptionPick	libtidy/src/config.c	/^static int  WriteOptionPick( const TidyOptionImpl* option, uint ival, StreamOut* out )$/;"	f	file:
WriteOptionString	libtidy/src/config.c	/^static int  WriteOptionString( const TidyOptionImpl* option,$/;"	f	file:
XMLPreserveWhiteSpace	libtidy/src/parser.c	/^Bool TY_(XMLPreserveWhiteSpace)( TidyDocImpl* doc, Node *element)$/;"	f
XMLoptionhelp	libtidy/console/tidy.c	/^static void XMLoptionhelp( TidyDoc tdoc )$/;"	f	file:
XS	Tidy.c	/^XS(XS_HTML__Tidy__tidy_clean)$/;"	f
XS	Tidy.c	/^XS(XS_HTML__Tidy__tidy_messages)$/;"	f
XS	Tidy.c	/^XS(XS_HTML__Tidy__tidy_release_date)$/;"	f
XS	Tidy.c	/^XS(boot_HTML__Tidy)$/;"	f
XS_HTML__Tidy__tidy_clean	Tidy.c	/^XS(XS_HTML__Tidy__tidy_clean); \/* prototype to pass -Wmissing-prototypes *\/$/;"	v
XS_HTML__Tidy__tidy_messages	Tidy.c	/^XS(XS_HTML__Tidy__tidy_messages); \/* prototype to pass -Wmissing-prototypes *\/$/;"	v
XS_HTML__Tidy__tidy_release_date	Tidy.c	/^XS(XS_HTML__Tidy__tidy_release_date); \/* prototype to pass -Wmissing-prototypes *\/$/;"	v
XX	libtidy/src/config.c	164;"	d	file:
XY	libtidy/src/config.c	165;"	d	file:
XmlDeclToken	libtidy/src/lexer.c	1260;"	d	file:
_cfgGet	libtidy/src/config.c	/^ulong   TY_(_cfgGet)( TidyDocImpl* doc, TidyOptionId optId )$/;"	f
_cfgGetAutoBool	libtidy/src/config.c	/^TidyTriState    TY_(_cfgGetAutoBool)( TidyDocImpl* doc, TidyOptionId optId )$/;"	f
_cfgGetBool	libtidy/src/config.c	/^Bool    TY_(_cfgGetBool)( TidyDocImpl* doc, TidyOptionId optId )$/;"	f
_cfgGetString	libtidy/src/config.c	/^ctmbstr TY_(_cfgGetString)( TidyDocImpl* doc, TidyOptionId optId )$/;"	f
_charsetInfo	libtidy/src/charsets.c	/^static struct _charsetInfo$/;"	s	file:
_colors	libtidy/src/attrs.c	/^struct _colors$/;"	s	file:
_doctypes	libtidy/src/lexer.c	/^static struct _doctypes$/;"	s	file:
_enc2iana	libtidy/src/streamio.c	/^static struct _enc2iana$/;"	s	file:
_entity	libtidy/src/entities.c	/^struct _entity$/;"	s	file:
_fp_input_mapped_source	libtidy/src/mappedio.c	/^typedef struct _fp_input_mapped_source$/;"	s	file:
_fp_input_source	libtidy/src/fileio.c	/^typedef struct _fp_input_source$/;"	s	file:
_is_keeper	lib/HTML/Tidy.pm	/^sub _is_keeper {$/;"	s
_load_config_hash	Tidy.c	/^_load_config_hash(TidyDoc tdoc, HV *tidy_options)$/;"	f	file:
_match_up	t/message.t	/^sub _match_up {$/;"	s
_msgfmt	libtidy/src/localize.c	/^static struct _msgfmt$/;"	s	file:
_nameWinCPMap	libtidy/src/win32tc.c	/^static struct _nameWinCPMap$/;"	s	file:
_parse_errors	lib/HTML/Tidy.pm	/^sub _parse_errors {$/;"	s
_unicode4cat	libtidy/src/pprint.c	/^static struct _unicode4cat$/;"	s	file:
accessPicks	libtidy/src/config.c	/^static const ctmbstr accessPicks[] = $/;"	v	file:
allocator	libtidy/src/mappedio.c	/^    TidyAllocator *allocator;$/;"	m	struct:__anon3	file:
allocator	libtidy/src/mappedio.c	/^    TidyAllocator *allocator;$/;"	m	struct:_fp_input_mapped_source	file:
as_string	lib/HTML/Tidy/Message.pm	/^sub as_string {$/;"	s
attrIsEvent	libtidy/src/attrs.c	/^Bool TY_(attrIsEvent)( AttVal* attval )$/;"	f
attribute_defs	libtidy/src/attrs.c	/^static const Attribute attribute_defs [] =$/;"	v	file:
autoBoolPicks	libtidy/src/config.c	/^static const ctmbstr autoBoolPicks[] = $/;"	v	file:
base	libtidy/src/mappedio.c	/^    const byte *base;$/;"	m	struct:__anon3	file:
boolPicks	libtidy/src/config.c	/^static const ctmbstr boolPicks[] = $/;"	v	file:
brightness	libtidy/src/access.c	/^static int brightness( const int rgb[3] )$/;"	f	file:
buf	libtidy/console/tab2space.c	/^    char *buf;$/;"	m	struct:__anon10	file:
cat	libtidy/console/tidy.c	/^    CmdOptCategory cat; \/**< Category *\/$/;"	m	struct:__anon7	file:
cat	libtidy/console/tidy.c	/^    ctmbstr cat;   \/**< Category *\/$/;"	m	struct:__anon8	file:
category	libtidy/src/pprint.c	/^  UnicodeCategory category;$/;"	m	struct:_unicode4cat	file:
charEncPicks	libtidy/src/config.c	/^static const ctmbstr charEncPicks[] = $/;"	v	file:
charset	libtidy/src/charsets.c	/^    ctmbstr charset;$/;"	m	struct:_charsetInfo	file:
charsetInfo	libtidy/src/charsets.c	/^} const charsetInfo[] =$/;"	v	file:
clean	lib/HTML/Tidy.pm	/^sub clean {$/;"	s
clear_messages	lib/HTML/Tidy.pm	/^sub clear_messages {$/;"	s
cmdopt_catname	libtidy/console/tidy.c	/^} cmdopt_catname[] = {$/;"	v	typeref:struct:__anon6	file:
cmdopt_defs	libtidy/console/tidy.c	/^static const CmdOptDesc cmdopt_defs[] =  {$/;"	v	file:
cmpOpt	libtidy/console/tidy.c	/^int cmpOpt(const void* e1_, const void *e2_)$/;"	f	file:
code	libtidy/src/entities.c	/^    uint    code;$/;"	m	struct:_entity	file:
code	libtidy/src/localize.c	/^    uint code;$/;"	m	struct:_msgfmt	file:
code	libtidy/src/pprint.c	/^  unsigned long code;$/;"	m	struct:_unicode4cat	file:
codepage	libtidy/src/charsets.c	/^    uint codepage;$/;"	m	struct:_charsetInfo	file:
colorNames	libtidy/src/access.c	/^static const ctmbstr colorNames[] =$/;"	v	file:
colorValues	libtidy/src/access.c	/^static const int colorValues[][3] =$/;"	v	file:
colors	libtidy/src/attrs.c	/^static const struct _colors colors[] =$/;"	v	typeref:struct:_colors	file:
column	lib/HTML/Tidy/Message.pm	/^sub column  { my $self = shift; return $self->{_column} }$/;"	s
ctox	libtidy/src/access.c	/^static int ctox( tmbchar ch )$/;"	f	file:
curcol	libtidy/console/tab2space.c	/^    int curcol;$/;"	m	struct:__anon10	file:
curline	libtidy/console/tab2space.c	/^    int curline;$/;"	m	struct:__anon10	file:
cutToWhiteSpace	libtidy/console/tidy.c	/^static const char *cutToWhiteSpace(const char *s, uint offset, char *sbuf)$/;"	f	file:
declare	libtidy/src/tags.c	/^static void declare( TidyDocImpl* doc, TidyTagImpl* tags,$/;"	f	file:
def	libtidy/console/tidy.c	/^    ctmbstr def;   \/**< default *\/$/;"	m	struct:__anon8	file:
defaultAlloc	libtidy/src/alloc.c	/^static void* TIDY_CALL defaultAlloc( TidyAllocator* allocator, size_t size )$/;"	f	file:
defaultRealloc	libtidy/src/alloc.c	/^static void* TIDY_CALL defaultRealloc( TidyAllocator* allocator, void* mem, size_t newsize )$/;"	f	file:
defaultVtbl	libtidy/src/alloc.c	/^static const TidyAllocatorVtbl defaultVtbl = {$/;"	v	file:
desc	libtidy/console/tidy.c	/^    ctmbstr desc;       \/**< Description *\/$/;"	m	struct:__anon7	file:
doctypePicks	libtidy/src/config.c	/^static const ctmbstr doctypePicks[] = $/;"	v	file:
emptyHash	libtidy/src/attrs.c	/^static void emptyHash( TidyDocImpl* doc, TidyAttribImpl * attribs )$/;"	f	file:
emptyHash	libtidy/src/tags.c	/^static void emptyHash( TidyDocImpl* doc, TidyTagImpl* tags )$/;"	f	file:
enc2iana	libtidy/src/streamio.c	/^} const enc2iana[] =$/;"	v	file:
end	libtidy/src/mappedio.c	/^    byte *view, *iter, *end;$/;"	m	struct:_fp_input_mapped_source	file:
endline	libtidy/console/tab2space.c	/^static int endline = DOS_CRLF;$/;"	v	file:
entities	libtidy/src/entities.c	/^static const entity entities[] =$/;"	v	file:
entity	libtidy/src/entities.c	/^typedef struct _entity entity;$/;"	t	typeref:struct:_entity	file:
eqconfig	libtidy/console/tidy.c	/^    ctmbstr eqconfig;   \/**< Equivalent configuration option *\/$/;"	m	struct:__anon7	file:
errout	libtidy/console/tidy.c	/^static FILE* errout = NULL;  \/* set to stderr *\/$/;"	v	file:
expand	libtidy/src/pprint.c	/^static void expand( TidyPrintImpl* pprint, uint len )$/;"	f	file:
false	libtidy/console/tab2space.c	8;"	d	file:
file	lib/HTML/Tidy/Message.pm	/^sub file    { my $self = shift; return $self->{_file} }$/;"	s
file	libtidy/src/mappedio.c	/^    HANDLE file, map;$/;"	m	struct:_fp_input_mapped_source	file:
filesink_putByte	libtidy/src/fileio.c	/^void TIDY_CALL TY_(filesink_putByte)( void* sinkData, byte bv )$/;"	f
filesrc_eof	libtidy/src/fileio.c	/^static Bool TIDY_CALL filesrc_eof( void* sourceData )$/;"	f	file:
filesrc_getByte	libtidy/src/fileio.c	/^static int TIDY_CALL filesrc_getByte( void* sourceData )$/;"	f	file:
filesrc_ungetByte	libtidy/src/fileio.c	/^static void TIDY_CALL filesrc_ungetByte( void* sourceData, byte bv )$/;"	f	file:
fmt	libtidy/console/tidy.c	/^static const char fmt[] = "%-27.27s %-9.9s  %-40.40s\\n";$/;"	v	file:
fmt	libtidy/src/localize.c	/^    ctmbstr fmt;$/;"	m	struct:_msgfmt	file:
fp	libtidy/console/tab2space.c	/^    FILE *fp;$/;"	m	struct:__anon10	file:
fp	libtidy/src/fileio.c	/^    FILE*        fp;$/;"	m	struct:_fp_input_source	file:
fpi	libtidy/src/lexer.c	/^    ctmbstr fpi;$/;"	m	struct:_doctypes	file:
frameExtensions	libtidy/src/access.c	/^static const ctmbstr frameExtensions[] =$/;"	v	file:
freeFileSource	libtidy/src/fileio.c	/^void TY_(freeFileSource)( TidyInputSource* inp, Bool closeIt )$/;"	f
freeFileSource	libtidy/src/fileio.c	57;"	d	file:
freeFileSource	libtidy/src/mappedio.c	/^void TY_(freeFileSource)( TidyInputSource* inp, Bool closeIt )$/;"	f
freeMappedFileSource	libtidy/src/mappedio.c	/^static void freeMappedFileSource( TidyInputSource* inp, Bool closeIt )$/;"	f	file:
freeStreamIn	libtidy/src/streamio.c	/^void TY_(freeStreamIn)(StreamIn* in)$/;"	f
g_default_allocator	libtidy/src/alloc.c	/^TidyAllocator TY_(g_default_allocator) = {$/;"	v
g_free	libtidy/src/alloc.c	/^static TidyFree    g_free    = NULL;$/;"	v	file:
g_malloc	libtidy/src/alloc.c	/^static TidyMalloc  g_malloc  = NULL;$/;"	v	file:
g_panic	libtidy/src/alloc.c	/^static TidyPanic   g_panic   = NULL;$/;"	v	file:
g_realloc	libtidy/src/alloc.c	/^static TidyRealloc g_realloc = NULL;$/;"	v	file:
getNextOptionPick	libtidy/src/config.c	/^ctmbstr      TY_(getNextOptionPick)( const TidyOptionImpl* option,$/;"	f
getOption	libtidy/src/config.c	/^const TidyOptionImpl* TY_(getOption)( TidyOptionId optId )$/;"	f
getOptionList	libtidy/src/config.c	/^TidyIterator TY_(getOptionList)( TidyDocImpl* ARG_UNUSED(doc) )$/;"	f
getOptionPickList	libtidy/src/config.c	/^TidyIterator TY_(getOptionPickList)( const TidyOptionImpl* option )$/;"	f
getSortedOption	libtidy/console/tidy.c	/^void getSortedOption( TidyDoc tdoc, AllOption_t *tOption )$/;"	f	file:
getTextNode	libtidy/src/access.c	/^static void getTextNode( TidyDocImpl* doc, Node* node )$/;"	f	file:
getTextNodeClear	libtidy/src/access.c	/^static tmbstr getTextNodeClear( TidyDocImpl* doc, Node* node )$/;"	f	file:
get_escaped_name	libtidy/console/tidy.c	/^static tmbstr get_escaped_name( ctmbstr name )$/;"	f	file:
get_option_names	libtidy/console/tidy.c	/^static tmbstr get_option_names( const CmdOptDesc* pos )$/;"	f	file:
gran	libtidy/src/mappedio.c	/^    unsigned int gran;$/;"	m	struct:_fp_input_mapped_source	file:
hasValue	libtidy/src/access.c	/^static Bool hasValue( AttVal* av )$/;"	f	file:
hash	libtidy/src/attrs.c	/^static uint hash(ctmbstr s)$/;"	f	file:
hash	libtidy/src/tags.c	/^static uint hash(ctmbstr s)$/;"	f	file:
haveVals	libtidy/console/tidy.c	/^    Bool haveVals; \/**< if yes, vals is valid *\/$/;"	m	struct:__anon8	file:
help	libtidy/console/tidy.c	/^static void help( ctmbstr prog )$/;"	f	file:
helpfmt	libtidy/console/tidy.c	/^static const char helpfmt[] = " %-19.19s %-58.58s\\n";$/;"	v	file:
helpul	libtidy/console/tidy.c	/^static const char helpul[]$/;"	v	file:
hex	libtidy/src/attrs.c	/^    ctmbstr hex;$/;"	m	struct:_colors	file:
highChar	libtidy/src/utf8.c	/^     uint highChar;$/;"	m	struct:validUTF8Sequence	file:
id	libtidy/src/charsets.c	/^    uint id;$/;"	m	struct:_charsetInfo	file:
id	libtidy/src/streamio.c	/^    uint id;$/;"	m	struct:_enc2iana	file:
ignore	lib/HTML/Tidy.pm	/^sub ignore {$/;"	s
imageExtensions	libtidy/src/access.c	/^static const ctmbstr imageExtensions[] =$/;"	v	file:
initFileSink	libtidy/src/fileio.c	/^void TY_(initFileSink)( TidyOutputSink* outp, FILE* fp )$/;"	f
initFileSource	libtidy/src/fileio.c	/^int TY_(initFileSource)( TidyAllocator *allocator, TidyInputSource* inp, FILE* fp )$/;"	f
initFileSource	libtidy/src/fileio.c	56;"	d	file:
initFileSource	libtidy/src/mappedio.c	/^int TY_(initFileSource)( TidyAllocator *allocator, TidyInputSource* inp, FILE* fp )$/;"	f
initMappedFileSource	libtidy/src/mappedio.c	/^static int initMappedFileSource( TidyAllocator *allocator, TidyInputSource* inp, HANDLE fp )$/;"	f	file:
initStreamIn	libtidy/src/streamio.c	/^StreamIn* TY_(initStreamIn)( TidyDocImpl* doc, int encoding )$/;"	f
initStreamOut	libtidy/src/streamio.c	/^static StreamOut* initStreamOut( TidyDocImpl* doc, int encoding, uint nl )$/;"	f	file:
insrc_eof	libtidy/src/buffio.c	/^static Bool TIDY_CALL insrc_eof( void* appData )$/;"	f	file:
insrc_getByte	libtidy/src/buffio.c	/^static int TIDY_CALL insrc_getByte( void* appData )$/;"	f	file:
insrc_ungetByte	libtidy/src/buffio.c	/^static void TIDY_CALL insrc_ungetByte( void* appData, byte bv )$/;"	f	file:
install	libtidy/src/attrs.c	/^static const Attribute *install(TidyDocImpl* doc, TidyAttribImpl * attribs,$/;"	f	file:
install	libtidy/src/tags.c	/^static const Dict *install(TidyDocImpl* doc, TidyTagImpl* tags, const Dict* old)$/;"	f	file:
integrity	libtidy/src/tidylib.c	/^static ctmbstr integrity = "\\nPanic - tree has lost its integrity\\n";$/;"	v	file:
isAutoBool	libtidy/console/tidy.c	/^static Bool isAutoBool( TidyOption topt )$/;"	f	file:
iter	libtidy/src/mappedio.c	/^    byte *view, *iter, *end;$/;"	m	struct:_fp_input_mapped_source	file:
kMaxUTF16FromUCS4	libtidy/src/utf8.c	133;"	d	file:
kMaxUTF8Bytes	libtidy/src/utf8.c	125;"	d	file:
kMaxUTF8FromUCS4	libtidy/src/utf8.c	130;"	d	file:
kNumUTF8Sequences	libtidy/src/utf8.c	124;"	d	file:
kUTF16HighSurrogateBegin	libtidy/src/utf8.c	138;"	d	file:
kUTF16HighSurrogateEnd	libtidy/src/utf8.c	139;"	d	file:
kUTF16LowSurrogateBegin	libtidy/src/utf8.c	136;"	d	file:
kUTF16LowSurrogateEnd	libtidy/src/utf8.c	137;"	d	file:
kUTF16SurrogatesBegin	libtidy/src/utf8.c	132;"	d	file:
kUTF8ByteSwapNotAChar	libtidy/src/utf8.c	127;"	d	file:
kUTF8NotAChar	libtidy/src/utf8.c	128;"	d	file:
lastcol	libtidy/console/tab2space.c	/^    int lastcol;$/;"	m	struct:__anon10	file:
length	libtidy/console/tab2space.c	/^    uint length;$/;"	m	struct:__anon10	file:
lexmap	libtidy/src/lexer.c	/^static uint lexmap[128];$/;"	v	file:
libtidy_version	lib/HTML/Tidy.pm	/^sub libtidy_version {$/;"	s
line	lib/HTML/Tidy/Message.pm	/^sub line    { my $self = shift; return $self->{_line} }$/;"	s
lookup	libtidy/src/attrs.c	/^static const Attribute* lookup(TidyDocImpl* doc,$/;"	f	file:
lookup	libtidy/src/entities.c	/^static const entity* lookup( ctmbstr s )$/;"	f	file:
lookup	libtidy/src/tags.c	/^static const Dict* lookup( TidyDocImpl* doc, TidyTagImpl* tags, ctmbstr s )$/;"	f	file:
lookupOption	libtidy/src/config.c	/^const TidyOptionImpl* TY_(lookupOption)( ctmbstr s )$/;"	f
lowChar	libtidy/src/utf8.c	/^     uint lowChar;$/;"	m	struct:validUTF8Sequence	file:
main	libtidy/console/tab2space.c	/^int main(int argc, char **argv)$/;"	f
main	libtidy/console/tidy.c	/^int main( int argc, char** argv )$/;"	f
map	libtidy/src/mappedio.c	/^    HANDLE file, map;$/;"	m	struct:_fp_input_mapped_source	file:
mapped_eof	libtidy/src/mappedio.c	/^static Bool TIDY_CALL mapped_eof( void *sourceData )$/;"	f	file:
mapped_eof	libtidy/src/mappedio.c	/^static Bool TIDY_CALL mapped_eof( void* sourceData )$/;"	f	file:
mapped_getByte	libtidy/src/mappedio.c	/^static int TIDY_CALL mapped_getByte( void *sourceData )$/;"	f	file:
mapped_getByte	libtidy/src/mappedio.c	/^static int TIDY_CALL mapped_getByte( void* sourceData )$/;"	f	file:
mapped_openView	libtidy/src/mappedio.c	/^static int mapped_openView( MappedFileSource *data )$/;"	f	file:
mapped_ungetByte	libtidy/src/mappedio.c	/^static void TIDY_CALL mapped_ungetByte( void *sourceData, byte ARG_UNUSED(bt) )$/;"	f	file:
mapped_ungetByte	libtidy/src/mappedio.c	/^static void TIDY_CALL mapped_ungetByte( void* sourceData, byte ARG_UNUSED(bv) )$/;"	f	file:
maxcol	libtidy/console/tab2space.c	/^    int maxcol;$/;"	m	struct:__anon10	file:
mediaExtensions	libtidy/src/access.c	/^static const ctmbstr mediaExtensions[] = $/;"	v	file:
message	libtidy/src/localize.c	/^void message( TidyDocImpl* doc, TidyReportLevel level, ctmbstr msg, ... )$/;"	f
messageLexer	libtidy/src/localize.c	/^void messageLexer( TidyDocImpl* doc, TidyReportLevel level, ctmbstr msg, ... )$/;"	f
messageNode	libtidy/src/localize.c	/^void messageNode( TidyDocImpl* doc, TidyReportLevel level, Node* node,$/;"	f
messagePos	libtidy/src/localize.c	/^static void messagePos( TidyDocImpl* doc, TidyReportLevel level,$/;"	f	file:
messages	lib/HTML/Tidy.pm	/^sub messages {$/;"	s
minmax	libtidy/src/access.c	/^static int minmax( int i1, int i2 )$/;"	f	file:
mnemonic	libtidy/console/tidy.c	/^    ctmbstr mnemonic;$/;"	m	struct:__anon6	file:
msgFormat	libtidy/src/localize.c	/^} const msgFormat[] = $/;"	v	file:
name	libtidy/console/tidy.c	/^    ctmbstr name;  \/**< Name *\/$/;"	m	struct:__anon8	file:
name	libtidy/console/tidy.c	/^    ctmbstr name;$/;"	m	struct:__anon6	file:
name	libtidy/src/attrs.c	/^    ctmbstr name;$/;"	m	struct:_colors	file:
name	libtidy/src/entities.c	/^    ctmbstr name;$/;"	m	struct:_entity	file:
name	libtidy/src/lexer.c	/^    ctmbstr name;$/;"	m	struct:_doctypes	file:
name	libtidy/src/streamio.c	/^    ctmbstr name;$/;"	m	struct:_enc2iana	file:
name	libtidy/src/win32tc.c	/^    tmbstr name;$/;"	m	struct:_nameWinCPMap	file:
name1	libtidy/console/tidy.c	/^    ctmbstr name1;      \/**< Name *\/$/;"	m	struct:__anon7	file:
name2	libtidy/console/tidy.c	/^    ctmbstr name2;      \/**< Name *\/$/;"	m	struct:__anon7	file:
name3	libtidy/console/tidy.c	/^    ctmbstr name3;      \/**< Name *\/$/;"	m	struct:__anon7	file:
new	lib/HTML/Tidy.pm	/^sub new {$/;"	s
new	lib/HTML/Tidy/Message.pm	/^sub new {$/;"	s
newlinePicks	libtidy/src/config.c	/^static const ctmbstr newlinePicks[] = $/;"	v	file:
nodeCMIsBlock	libtidy/src/tags.c	/^Bool TY_(nodeCMIsBlock)( Node* node )$/;"	f
nodeCMIsEmpty	libtidy/src/tags.c	/^Bool TY_(nodeCMIsEmpty)( Node* node )$/;"	f
nodeCMIsInline	libtidy/src/tags.c	/^Bool TY_(nodeCMIsInline)( Node* node )$/;"	f
nodeCMIsOnlyInline	libtidy/src/parser.c	/^static Bool nodeCMIsOnlyInline( Node* node )$/;"	f	file:
nodeHasCM	libtidy/src/tags.c	/^Bool TY_(nodeHasCM)( Node* node, uint contentModel )$/;"	f
nodeHasText	libtidy/src/tags.c	/^Bool TY_(nodeHasText)( TidyDocImpl* doc, Node* node )$/;"	f
nodeHeaderLevel	libtidy/src/tags.c	/^uint TY_(nodeHeaderLevel)( Node* node )$/;"	f
nodeIsElement	libtidy/src/tags.c	/^Bool TY_(nodeIsElement)( Node* node )$/;"	f
nodeIsHeader	libtidy/src/tags.c	/^Bool TY_(nodeIsHeader)( Node* node )$/;"	f
nodeIsText	libtidy/src/tags.c	/^Bool TY_(nodeIsText)( Node* node )$/;"	f
numBytes	libtidy/src/utf8.c	/^     int  numBytes;$/;"	m	struct:validUTF8Sequence	file:
offsetUTF8Sequences	libtidy/src/utf8.c	/^static const int offsetUTF8Sequences[kMaxUTF8Bytes + 1] =$/;"	v	file:
option_defs	libtidy/src/config.c	/^static const TidyOptionImpl option_defs[] =$/;"	v	file:
option_docs	libtidy/src/localize.c	/^static const TidyOptionDoc option_docs[] =$/;"	v	file:
optionhelp	libtidy/console/tidy.c	/^static void optionhelp( TidyDoc tdoc )$/;"	f	file:
optionvalues	libtidy/console/tidy.c	/^static void optionvalues( TidyDoc tdoc )$/;"	f	file:
outBOM	libtidy/src/streamio.c	/^void TY_(outBOM)( StreamOut *out )$/;"	f
outOfMemory	libtidy/console/tidy.c	/^static void outOfMemory(void)$/;"	f	file:
outsink_putByte	libtidy/src/buffio.c	/^static void TIDY_CALL outsink_putByte( void* appData, byte bv )$/;"	f	file:
parse	lib/HTML/Tidy.pm	/^sub parse {$/;"	s
pos	libtidy/src/mappedio.c	/^    LONGLONG size, pos;$/;"	m	struct:_fp_input_mapped_source	file:
pos	libtidy/src/mappedio.c	/^    size_t pos, size;$/;"	m	struct:__anon3	file:
print2Columns	libtidy/console/tidy.c	/^static void print2Columns( const char* fmt, uint l1, uint l2,$/;"	f	file:
print3Columns	libtidy/console/tidy.c	/^static void print3Columns( const char* fmt, uint l1, uint l2, uint l3,$/;"	f	file:
printXMLCrossRef	libtidy/console/tidy.c	/^void printXMLCrossRef( TidyDoc tdoc, TidyOption topt )$/;"	f	file:
printXMLDescription	libtidy/console/tidy.c	/^void printXMLDescription( TidyDoc tdoc, TidyOption topt )$/;"	f	file:
printXMLOption	libtidy/console/tidy.c	/^void printXMLOption( TidyDoc tdoc, TidyOption topt, OptionDesc *d )$/;"	f	file:
print_help_option	libtidy/console/tidy.c	/^static void print_help_option( void )$/;"	f	file:
print_xml_help_option	libtidy/console/tidy.c	/^static void print_xml_help_option( void )$/;"	f	file:
print_xml_help_option_element	libtidy/console/tidy.c	/^static void print_xml_help_option_element( ctmbstr element, ctmbstr name )$/;"	f	file:
ptAttValComparator	libtidy/src/attrs.c	/^typedef int(*ptAttValComparator)(AttVal *one, AttVal *two);$/;"	t	file:
pushed	libtidy/console/tab2space.c	/^    Bool pushed;$/;"	m	struct:__anon10	file:
pushed_char	libtidy/console/tab2space.c	/^    int pushed_char;$/;"	m	struct:__anon10	file:
removeFromHash	libtidy/src/attrs.c	/^static void removeFromHash( TidyDocImpl* doc, TidyAttribImpl *attribs,$/;"	f	file:
removeFromHash	libtidy/src/tags.c	/^static void removeFromHash( TidyDocImpl* doc, TidyTagImpl* tags, ctmbstr s )$/;"	f	file:
repeatAttrPicks	libtidy/src/config.c	/^static const ctmbstr repeatAttrPicks[] = $/;"	v	file:
row	libtidy/src/parser.c	/^static void MoveBeforeTable( TidyDocImpl* ARG_UNUSED(doc), Node *row,$/;"	v	file:
safe	libtidy/src/win32tc.c	/^    Bool safe;$/;"	m	struct:_nameWinCPMap	file:
samefile	libtidy/console/tidy.c	/^static Bool samefile( ctmbstr filename1, ctmbstr filename2 )$/;"	f	file:
score	libtidy/src/lexer.c	/^    uint score;$/;"	m	struct:_doctypes	file:
setDefaultAllocator	libtidy/src/buffio.c	/^static void setDefaultAllocator( TidyBuffer* buf )$/;"	f	file:
showBodyOnly	libtidy/src/tidylib.c	/^Bool showBodyOnly( TidyDocImpl* doc, TidyTriState bodyOnly )$/;"	f	file:
si	libtidy/src/lexer.c	/^    ctmbstr si;$/;"	m	struct:_doctypes	file:
size	libtidy/console/tab2space.c	/^    uint size;$/;"	m	struct:__anon10	file:
size	libtidy/src/mappedio.c	/^    LONGLONG size, pos;$/;"	m	struct:_fp_input_mapped_source	file:
size	libtidy/src/mappedio.c	/^    size_t pos, size;$/;"	m	struct:__anon3	file:
sorterPicks	libtidy/src/config.c	/^static const ctmbstr sorterPicks[] = $/;"	v	file:
soundExtErrCodes	libtidy/src/access.c	/^static const int soundExtErrCodes[] = $/;"	v	file:
soundExtensions	libtidy/src/access.c	/^static const ctmbstr soundExtensions[] =$/;"	v	file:
stateful	libtidy/src/charsets.c	/^    uint stateful;$/;"	m	struct:_charsetInfo	file:
stderrStreamOut	libtidy/src/streamio.c	/^static StreamOut stderrStreamOut = $/;"	v	file:
stdoutStreamOut	libtidy/src/streamio.c	/^static StreamOut stdoutStreamOut = $/;"	v	file:
tabs	libtidy/console/tab2space.c	/^    int tabs;$/;"	m	struct:__anon10	file:
tabs	libtidy/console/tab2space.c	/^static Bool tabs = false;$/;"	v	file:
tabsize	libtidy/console/tab2space.c	/^static int tabsize = TABSIZE;$/;"	v	file:
tagType	libtidy/src/tags.c	/^                                        UserTagType tagType, TidyIterator* iter )$/;"	v
tag_defs	libtidy/src/tags.c	/^static const Dict tag_defs[] =$/;"	v	file:
tempdefs	libtidy/console/tidy.c	/^    tmbchar tempdefs[80]; \/**< storage for default such as integer *\/$/;"	m	struct:__anon8	file:
text	lib/HTML/Tidy/Message.pm	/^sub text    { my $self = shift; return $self->{_text} }$/;"	s
textFromOneNode	libtidy/src/access.c	/^static ctmbstr textFromOneNode( TidyDocImpl* doc, Node* node )$/;"	f	file:
tidyAccessWarningCount	libtidy/src/tidylib.c	/^uint TIDY_CALL       tidyAccessWarningCount( TidyDoc tdoc )$/;"	f
tidyAttrFirst	libtidy/src/tidylib.c	/^TidyAttr TIDY_CALL   tidyAttrFirst( TidyNode tnod )$/;"	f
tidyAttrGetABBR	libtidy/src/attrget.c	/^TidyAttr TIDY_CALL tidyAttrGetABBR( TidyNode tnod )$/;"	f
tidyAttrGetALINK	libtidy/src/attrget.c	/^TidyAttr TIDY_CALL tidyAttrGetALINK( TidyNode tnod )$/;"	f
tidyAttrGetALT	libtidy/src/attrget.c	/^TidyAttr TIDY_CALL tidyAttrGetALT( TidyNode tnod )$/;"	f
tidyAttrGetBGCOLOR	libtidy/src/attrget.c	/^TidyAttr TIDY_CALL tidyAttrGetBGCOLOR( TidyNode tnod )$/;"	f
tidyAttrGetById	libtidy/src/attrget.c	/^TidyAttr TIDY_CALL tidyAttrGetById( TidyNode tnod, TidyAttrId attId )$/;"	f
tidyAttrGetCHECKED	libtidy/src/attrget.c	/^TidyAttr TIDY_CALL tidyAttrGetCHECKED( TidyNode tnod )$/;"	f
tidyAttrGetCOLSPAN	libtidy/src/attrget.c	/^TidyAttr TIDY_CALL tidyAttrGetCOLSPAN( TidyNode tnod )$/;"	f
tidyAttrGetCONTENT	libtidy/src/attrget.c	/^TidyAttr TIDY_CALL tidyAttrGetCONTENT( TidyNode tnod )$/;"	f
tidyAttrGetDATAFLD	libtidy/src/attrget.c	/^TidyAttr TIDY_CALL tidyAttrGetDATAFLD( TidyNode tnod )$/;"	f
tidyAttrGetFOR	libtidy/src/attrget.c	/^TidyAttr TIDY_CALL tidyAttrGetFOR( TidyNode tnod )$/;"	f
tidyAttrGetHEIGHT	libtidy/src/attrget.c	/^TidyAttr TIDY_CALL tidyAttrGetHEIGHT( TidyNode tnod )$/;"	f
tidyAttrGetHREF	libtidy/src/attrget.c	/^TidyAttr TIDY_CALL tidyAttrGetHREF( TidyNode tnod )$/;"	f
tidyAttrGetHTTP_EQUIV	libtidy/src/attrget.c	/^TidyAttr TIDY_CALL tidyAttrGetHTTP_EQUIV( TidyNode tnod )$/;"	f
tidyAttrGetID	libtidy/src/attrget.c	/^TidyAttr TIDY_CALL tidyAttrGetID( TidyNode tnod )$/;"	f
tidyAttrGetISMAP	libtidy/src/attrget.c	/^TidyAttr TIDY_CALL tidyAttrGetISMAP( TidyNode tnod )$/;"	f
tidyAttrGetId	libtidy/src/tidylib.c	/^TidyAttrId TIDY_CALL tidyAttrGetId( TidyAttr tattr )$/;"	f
tidyAttrGetLANG	libtidy/src/attrget.c	/^TidyAttr TIDY_CALL tidyAttrGetLANG( TidyNode tnod )$/;"	f
tidyAttrGetLANGUAGE	libtidy/src/attrget.c	/^TidyAttr TIDY_CALL tidyAttrGetLANGUAGE( TidyNode tnod )$/;"	f
tidyAttrGetLINK	libtidy/src/attrget.c	/^TidyAttr TIDY_CALL tidyAttrGetLINK( TidyNode tnod )$/;"	f
tidyAttrGetLONGDESC	libtidy/src/attrget.c	/^TidyAttr TIDY_CALL tidyAttrGetLONGDESC( TidyNode tnod )$/;"	f
tidyAttrGetNAME	libtidy/src/attrget.c	/^TidyAttr TIDY_CALL tidyAttrGetNAME( TidyNode tnod )$/;"	f
tidyAttrGetOnBLUR	libtidy/src/attrget.c	/^TidyAttr TIDY_CALL tidyAttrGetOnBLUR( TidyNode tnod )$/;"	f
tidyAttrGetOnCLICK	libtidy/src/attrget.c	/^TidyAttr TIDY_CALL tidyAttrGetOnCLICK( TidyNode tnod )$/;"	f
tidyAttrGetOnFOCUS	libtidy/src/attrget.c	/^TidyAttr TIDY_CALL tidyAttrGetOnFOCUS( TidyNode tnod )$/;"	f
tidyAttrGetOnKEYDOWN	libtidy/src/attrget.c	/^TidyAttr TIDY_CALL tidyAttrGetOnKEYDOWN( TidyNode tnod )$/;"	f
tidyAttrGetOnKEYPRESS	libtidy/src/attrget.c	/^TidyAttr TIDY_CALL tidyAttrGetOnKEYPRESS( TidyNode tnod )$/;"	f
tidyAttrGetOnKEYUP	libtidy/src/attrget.c	/^TidyAttr TIDY_CALL tidyAttrGetOnKEYUP( TidyNode tnod )$/;"	f
tidyAttrGetOnMOUSEDOWN	libtidy/src/attrget.c	/^TidyAttr TIDY_CALL tidyAttrGetOnMOUSEDOWN( TidyNode tnod )$/;"	f
tidyAttrGetOnMOUSEMOVE	libtidy/src/attrget.c	/^TidyAttr TIDY_CALL tidyAttrGetOnMOUSEMOVE( TidyNode tnod )$/;"	f
tidyAttrGetOnMOUSEOUT	libtidy/src/attrget.c	/^TidyAttr TIDY_CALL tidyAttrGetOnMOUSEOUT( TidyNode tnod )$/;"	f
tidyAttrGetOnMOUSEOVER	libtidy/src/attrget.c	/^TidyAttr TIDY_CALL tidyAttrGetOnMOUSEOVER( TidyNode tnod )$/;"	f
tidyAttrGetOnMOUSEUP	libtidy/src/attrget.c	/^TidyAttr TIDY_CALL tidyAttrGetOnMOUSEUP( TidyNode tnod )$/;"	f
tidyAttrGetREL	libtidy/src/attrget.c	/^TidyAttr TIDY_CALL tidyAttrGetREL( TidyNode tnod )$/;"	f
tidyAttrGetROWSPAN	libtidy/src/attrget.c	/^TidyAttr TIDY_CALL tidyAttrGetROWSPAN( TidyNode tnod )$/;"	f
tidyAttrGetSELECTED	libtidy/src/attrget.c	/^TidyAttr TIDY_CALL tidyAttrGetSELECTED( TidyNode tnod )$/;"	f
tidyAttrGetSRC	libtidy/src/attrget.c	/^TidyAttr TIDY_CALL tidyAttrGetSRC( TidyNode tnod )$/;"	f
tidyAttrGetSTYLE	libtidy/src/attrget.c	/^TidyAttr TIDY_CALL tidyAttrGetSTYLE( TidyNode tnod )$/;"	f
tidyAttrGetSUMMARY	libtidy/src/attrget.c	/^TidyAttr TIDY_CALL tidyAttrGetSUMMARY( TidyNode tnod )$/;"	f
tidyAttrGetTARGET	libtidy/src/attrget.c	/^TidyAttr TIDY_CALL tidyAttrGetTARGET( TidyNode tnod )$/;"	f
tidyAttrGetTEXT	libtidy/src/attrget.c	/^TidyAttr TIDY_CALL tidyAttrGetTEXT( TidyNode tnod )$/;"	f
tidyAttrGetTITLE	libtidy/src/attrget.c	/^TidyAttr TIDY_CALL tidyAttrGetTITLE( TidyNode tnod )$/;"	f
tidyAttrGetTYPE	libtidy/src/attrget.c	/^TidyAttr TIDY_CALL tidyAttrGetTYPE( TidyNode tnod )$/;"	f
tidyAttrGetUSEMAP	libtidy/src/attrget.c	/^TidyAttr TIDY_CALL tidyAttrGetUSEMAP( TidyNode tnod )$/;"	f
tidyAttrGetVALUE	libtidy/src/attrget.c	/^TidyAttr TIDY_CALL tidyAttrGetVALUE( TidyNode tnod )$/;"	f
tidyAttrGetVLINK	libtidy/src/attrget.c	/^TidyAttr TIDY_CALL tidyAttrGetVLINK( TidyNode tnod )$/;"	f
tidyAttrGetWIDTH	libtidy/src/attrget.c	/^TidyAttr TIDY_CALL tidyAttrGetWIDTH( TidyNode tnod )$/;"	f
tidyAttrGetXMLNS	libtidy/src/attrget.c	/^TidyAttr TIDY_CALL tidyAttrGetXMLNS( TidyNode tnod )$/;"	f
tidyAttrIsABBR	libtidy/src/attrask.c	/^Bool TIDY_CALL tidyAttrIsABBR( TidyAttr tattr )$/;"	f
tidyAttrIsALINK	libtidy/src/attrask.c	/^Bool TIDY_CALL tidyAttrIsALINK( TidyAttr tattr )$/;"	f
tidyAttrIsALT	libtidy/src/attrask.c	/^Bool TIDY_CALL tidyAttrIsALT( TidyAttr tattr )$/;"	f
tidyAttrIsBGCOLOR	libtidy/src/attrask.c	/^Bool TIDY_CALL tidyAttrIsBGCOLOR( TidyAttr tattr )$/;"	f
tidyAttrIsCHECKED	libtidy/src/attrask.c	/^Bool TIDY_CALL tidyAttrIsCHECKED( TidyAttr tattr )$/;"	f
tidyAttrIsCOLSPAN	libtidy/src/attrask.c	/^Bool TIDY_CALL tidyAttrIsCOLSPAN( TidyAttr tattr )$/;"	f
tidyAttrIsCONTENT	libtidy/src/attrask.c	/^Bool TIDY_CALL tidyAttrIsCONTENT( TidyAttr tattr )$/;"	f
tidyAttrIsDATAFLD	libtidy/src/attrask.c	/^Bool TIDY_CALL tidyAttrIsDATAFLD( TidyAttr tattr )$/;"	f
tidyAttrIsEvent	libtidy/src/attrask.c	/^Bool TIDY_CALL tidyAttrIsEvent( TidyAttr tattr )$/;"	f
tidyAttrIsFOR	libtidy/src/attrask.c	/^Bool TIDY_CALL tidyAttrIsFOR( TidyAttr tattr )$/;"	f
tidyAttrIsHEIGHT	libtidy/src/attrask.c	/^Bool TIDY_CALL tidyAttrIsHEIGHT( TidyAttr tattr )$/;"	f
tidyAttrIsHREF	libtidy/src/attrask.c	/^Bool TIDY_CALL tidyAttrIsHREF( TidyAttr tattr )$/;"	f
tidyAttrIsHTTP_EQUIV	libtidy/src/attrask.c	/^Bool TIDY_CALL tidyAttrIsHTTP_EQUIV( TidyAttr tattr )$/;"	f
tidyAttrIsID	libtidy/src/attrask.c	/^Bool TIDY_CALL tidyAttrIsID( TidyAttr tattr )$/;"	f
tidyAttrIsISMAP	libtidy/src/attrask.c	/^Bool TIDY_CALL tidyAttrIsISMAP( TidyAttr tattr )$/;"	f
tidyAttrIsLANG	libtidy/src/attrask.c	/^Bool TIDY_CALL tidyAttrIsLANG( TidyAttr tattr )$/;"	f
tidyAttrIsLANGUAGE	libtidy/src/attrask.c	/^Bool TIDY_CALL tidyAttrIsLANGUAGE( TidyAttr tattr )$/;"	f
tidyAttrIsLINK	libtidy/src/attrask.c	/^Bool TIDY_CALL tidyAttrIsLINK( TidyAttr tattr )$/;"	f
tidyAttrIsLONGDESC	libtidy/src/attrask.c	/^Bool TIDY_CALL tidyAttrIsLONGDESC( TidyAttr tattr )$/;"	f
tidyAttrIsNAME	libtidy/src/attrask.c	/^Bool TIDY_CALL tidyAttrIsNAME( TidyAttr tattr )$/;"	f
tidyAttrIsOnBLUR	libtidy/src/attrask.c	/^Bool TIDY_CALL tidyAttrIsOnBLUR( TidyAttr tattr )$/;"	f
tidyAttrIsOnCLICK	libtidy/src/attrask.c	/^Bool TIDY_CALL tidyAttrIsOnCLICK( TidyAttr tattr )$/;"	f
tidyAttrIsOnFOCUS	libtidy/src/attrask.c	/^Bool TIDY_CALL tidyAttrIsOnFOCUS( TidyAttr tattr )$/;"	f
tidyAttrIsOnKEYDOWN	libtidy/src/attrask.c	/^Bool TIDY_CALL tidyAttrIsOnKEYDOWN( TidyAttr tattr )$/;"	f
tidyAttrIsOnKEYPRESS	libtidy/src/attrask.c	/^Bool TIDY_CALL tidyAttrIsOnKEYPRESS( TidyAttr tattr )$/;"	f
tidyAttrIsOnKEYUP	libtidy/src/attrask.c	/^Bool TIDY_CALL tidyAttrIsOnKEYUP( TidyAttr tattr )$/;"	f
tidyAttrIsOnMOUSEDOWN	libtidy/src/attrask.c	/^Bool TIDY_CALL tidyAttrIsOnMOUSEDOWN( TidyAttr tattr )$/;"	f
tidyAttrIsOnMOUSEMOVE	libtidy/src/attrask.c	/^Bool TIDY_CALL tidyAttrIsOnMOUSEMOVE( TidyAttr tattr )$/;"	f
tidyAttrIsOnMOUSEOUT	libtidy/src/attrask.c	/^Bool TIDY_CALL tidyAttrIsOnMOUSEOUT( TidyAttr tattr )$/;"	f
tidyAttrIsOnMOUSEOVER	libtidy/src/attrask.c	/^Bool TIDY_CALL tidyAttrIsOnMOUSEOVER( TidyAttr tattr )$/;"	f
tidyAttrIsOnMOUSEUP	libtidy/src/attrask.c	/^Bool TIDY_CALL tidyAttrIsOnMOUSEUP( TidyAttr tattr )$/;"	f
tidyAttrIsProp	libtidy/src/tidylib.c	/^Bool TIDY_CALL tidyAttrIsProp( TidyAttr tattr )$/;"	f
tidyAttrIsREL	libtidy/src/attrask.c	/^Bool TIDY_CALL tidyAttrIsREL( TidyAttr tattr )$/;"	f
tidyAttrIsROWSPAN	libtidy/src/attrask.c	/^Bool TIDY_CALL tidyAttrIsROWSPAN( TidyAttr tattr )$/;"	f
tidyAttrIsSELECTED	libtidy/src/attrask.c	/^Bool TIDY_CALL tidyAttrIsSELECTED( TidyAttr tattr )$/;"	f
tidyAttrIsSRC	libtidy/src/attrask.c	/^Bool TIDY_CALL tidyAttrIsSRC( TidyAttr tattr )$/;"	f
tidyAttrIsSTYLE	libtidy/src/attrask.c	/^Bool TIDY_CALL tidyAttrIsSTYLE( TidyAttr tattr )$/;"	f
tidyAttrIsSUMMARY	libtidy/src/attrask.c	/^Bool TIDY_CALL tidyAttrIsSUMMARY( TidyAttr tattr )$/;"	f
tidyAttrIsTARGET	libtidy/src/attrask.c	/^Bool TIDY_CALL tidyAttrIsTARGET( TidyAttr tattr )$/;"	f
tidyAttrIsTEXT	libtidy/src/attrask.c	/^Bool TIDY_CALL tidyAttrIsTEXT( TidyAttr tattr )$/;"	f
tidyAttrIsTITLE	libtidy/src/attrask.c	/^Bool TIDY_CALL tidyAttrIsTITLE( TidyAttr tattr )$/;"	f
tidyAttrIsTYPE	libtidy/src/attrask.c	/^Bool TIDY_CALL tidyAttrIsTYPE( TidyAttr tattr )$/;"	f
tidyAttrIsUSEMAP	libtidy/src/attrask.c	/^Bool TIDY_CALL tidyAttrIsUSEMAP( TidyAttr tattr )$/;"	f
tidyAttrIsVALUE	libtidy/src/attrask.c	/^Bool TIDY_CALL tidyAttrIsVALUE( TidyAttr tattr )$/;"	f
tidyAttrIsVLINK	libtidy/src/attrask.c	/^Bool TIDY_CALL tidyAttrIsVLINK( TidyAttr tattr )$/;"	f
tidyAttrIsWIDTH	libtidy/src/attrask.c	/^Bool TIDY_CALL tidyAttrIsWIDTH( TidyAttr tattr )$/;"	f
tidyAttrIsXMLNS	libtidy/src/attrask.c	/^Bool TIDY_CALL tidyAttrIsXMLNS( TidyAttr tattr )$/;"	f
tidyAttrName	libtidy/src/tidylib.c	/^ctmbstr TIDY_CALL       tidyAttrName( TidyAttr tattr )$/;"	f
tidyAttrNext	libtidy/src/tidylib.c	/^TidyAttr TIDY_CALL    tidyAttrNext( TidyAttr tattr )$/;"	f
tidyAttrToImpl	libtidy/src/tidylib.c	/^AttVal*      tidyAttrToImpl( TidyAttr tattr )$/;"	f
tidyAttrValue	libtidy/src/tidylib.c	/^ctmbstr TIDY_CALL       tidyAttrValue( TidyAttr tattr )$/;"	f
tidyBufAlloc	libtidy/src/buffio.c	/^void TIDY_CALL tidyBufAlloc( TidyBuffer* buf, uint allocSize )$/;"	f
tidyBufAllocWithAllocator	libtidy/src/buffio.c	/^void TIDY_CALL tidyBufAllocWithAllocator( TidyBuffer* buf,$/;"	f
tidyBufAppend	libtidy/src/buffio.c	/^void TIDY_CALL tidyBufAppend( TidyBuffer* buf, void* vp, uint size )$/;"	f
tidyBufAttach	libtidy/src/buffio.c	/^void  TIDY_CALL tidyBufAttach( TidyBuffer* buf, byte* bp, uint size )$/;"	f
tidyBufCheckAlloc	libtidy/src/buffio.c	/^void TIDY_CALL tidyBufCheckAlloc( TidyBuffer* buf, uint allocSize, uint chunkSize )$/;"	f
tidyBufClear	libtidy/src/buffio.c	/^void TIDY_CALL tidyBufClear( TidyBuffer* buf )$/;"	f
tidyBufDetach	libtidy/src/buffio.c	/^void TIDY_CALL tidyBufDetach( TidyBuffer* buf )$/;"	f
tidyBufEndOfInput	libtidy/src/buffio.c	/^Bool TIDY_CALL tidyBufEndOfInput( TidyBuffer* buf )$/;"	f
tidyBufFree	libtidy/src/buffio.c	/^void TIDY_CALL tidyBufFree( TidyBuffer* buf )$/;"	f
tidyBufGetByte	libtidy/src/buffio.c	/^int TIDY_CALL tidyBufGetByte( TidyBuffer* buf )$/;"	f
tidyBufInit	libtidy/src/buffio.c	/^void TIDY_CALL tidyBufInit( TidyBuffer* buf )$/;"	f
tidyBufInitWithAllocator	libtidy/src/buffio.c	/^void TIDY_CALL tidyBufInitWithAllocator( TidyBuffer* buf,$/;"	f
tidyBufPopByte	libtidy/src/buffio.c	/^int TIDY_CALL tidyBufPopByte( TidyBuffer* buf )$/;"	f
tidyBufPutByte	libtidy/src/buffio.c	/^void TIDY_CALL tidyBufPutByte( TidyBuffer* buf, byte bv )$/;"	f
tidyBufUngetByte	libtidy/src/buffio.c	/^void TIDY_CALL tidyBufUngetByte( TidyBuffer* buf, byte bv )$/;"	f
tidyCleanAndRepair	libtidy/src/tidylib.c	/^int TIDY_CALL        tidyCleanAndRepair( TidyDoc tdoc )$/;"	f
tidyConfigErrorCount	libtidy/src/tidylib.c	/^uint TIDY_CALL       tidyConfigErrorCount( TidyDoc tdoc )$/;"	f
tidyCreate	libtidy/src/tidylib.c	/^TidyDoc TIDY_CALL       tidyCreate(void)$/;"	f
tidyCreateWithAllocator	libtidy/src/tidylib.c	/^TidyDoc TIDY_CALL tidyCreateWithAllocator( TidyAllocator *allocator )$/;"	f
tidyDocCleanAndRepair	libtidy/src/tidylib.c	/^int         tidyDocCleanAndRepair( TidyDocImpl* doc )$/;"	f
tidyDocCreate	libtidy/src/tidylib.c	/^TidyDocImpl* tidyDocCreate( TidyAllocator *allocator )$/;"	f
tidyDocParseBuffer	libtidy/src/tidylib.c	/^int   tidyDocParseBuffer( TidyDocImpl* doc, TidyBuffer* inbuf )$/;"	f
tidyDocParseFile	libtidy/src/tidylib.c	/^int   tidyDocParseFile( TidyDocImpl* doc, ctmbstr filnam )$/;"	f
tidyDocParseSource	libtidy/src/tidylib.c	/^int   tidyDocParseSource( TidyDocImpl* doc, TidyInputSource* source )$/;"	f
tidyDocParseStdin	libtidy/src/tidylib.c	/^int   tidyDocParseStdin( TidyDocImpl* doc )$/;"	f
tidyDocParseString	libtidy/src/tidylib.c	/^int   tidyDocParseString( TidyDocImpl* doc, ctmbstr content )$/;"	f
tidyDocRelease	libtidy/src/tidylib.c	/^void          tidyDocRelease( TidyDocImpl* doc )$/;"	f
tidyDocRunDiagnostics	libtidy/src/tidylib.c	/^int         tidyDocRunDiagnostics( TidyDocImpl* doc )$/;"	f
tidyDocSaveBuffer	libtidy/src/tidylib.c	/^int         tidyDocSaveBuffer( TidyDocImpl* doc, TidyBuffer* outbuf )$/;"	f
tidyDocSaveFile	libtidy/src/tidylib.c	/^int         tidyDocSaveFile( TidyDocImpl* doc, ctmbstr filnam )$/;"	f
tidyDocSaveSink	libtidy/src/tidylib.c	/^int         tidyDocSaveSink( TidyDocImpl* doc, TidyOutputSink* sink )$/;"	f
tidyDocSaveStdout	libtidy/src/tidylib.c	/^int         tidyDocSaveStdout( TidyDocImpl* doc )$/;"	f
tidyDocSaveStream	libtidy/src/tidylib.c	/^int         tidyDocSaveStream( TidyDocImpl* doc, StreamOut* out )$/;"	f
tidyDocSaveString	libtidy/src/tidylib.c	/^int         tidyDocSaveString( TidyDocImpl* doc, tmbstr buffer, uint* buflen )$/;"	f
tidyDocStatus	libtidy/src/tidylib.c	/^int         tidyDocStatus( TidyDocImpl* doc )$/;"	f
tidyDocToImpl	libtidy/src/tidylib.c	/^TidyDocImpl* tidyDocToImpl( TidyDoc tdoc )$/;"	f
tidyErrorCount	libtidy/src/tidylib.c	/^uint TIDY_CALL       tidyErrorCount( TidyDoc tdoc )$/;"	f
tidyErrorSummary	libtidy/src/tidylib.c	/^void TIDY_CALL         tidyErrorSummary( TidyDoc tdoc )$/;"	f
tidyFileExists	libtidy/src/config.c	/^Bool TIDY_CALL tidyFileExists( TidyDoc tdoc, ctmbstr filename )$/;"	f
tidyGeneralInfo	libtidy/src/tidylib.c	/^void TIDY_CALL         tidyGeneralInfo( TidyDoc tdoc )$/;"	f
tidyGetAppData	libtidy/src/tidylib.c	/^void* TIDY_CALL       tidyGetAppData( TidyDoc tdoc )$/;"	f
tidyGetBody	libtidy/src/tidylib.c	/^TidyNode TIDY_CALL    tidyGetBody( TidyDoc tdoc )$/;"	f
tidyGetByte	libtidy/src/streamio.c	/^uint TIDY_CALL tidyGetByte( TidyInputSource* source )$/;"	f
tidyGetChild	libtidy/src/tidylib.c	/^TidyNode TIDY_CALL    tidyGetChild( TidyNode tnod )$/;"	f
tidyGetHead	libtidy/src/tidylib.c	/^TidyNode TIDY_CALL    tidyGetHead( TidyDoc tdoc )$/;"	f
tidyGetHtml	libtidy/src/tidylib.c	/^TidyNode TIDY_CALL   tidyGetHtml( TidyDoc tdoc )$/;"	f
tidyGetNext	libtidy/src/tidylib.c	/^TidyNode TIDY_CALL    tidyGetNext( TidyNode tnod )$/;"	f
tidyGetNextOption	libtidy/src/tidylib.c	/^TidyOption TIDY_CALL    tidyGetNextOption( TidyDoc tdoc, TidyIterator* pos )$/;"	f
tidyGetOptionList	libtidy/src/tidylib.c	/^TidyIterator TIDY_CALL  tidyGetOptionList( TidyDoc tdoc )$/;"	f
tidyGetParent	libtidy/src/tidylib.c	/^TidyNode TIDY_CALL    tidyGetParent( TidyNode tnod )$/;"	f
tidyGetPrev	libtidy/src/tidylib.c	/^TidyNode TIDY_CALL    tidyGetPrev( TidyNode tnod )$/;"	f
tidyGetRoot	libtidy/src/tidylib.c	/^TidyNode TIDY_CALL   tidyGetRoot( TidyDoc tdoc )$/;"	f
tidyImplToAttr	libtidy/src/tidylib.c	/^TidyAttr     tidyImplToAttr( AttVal* attval )$/;"	f
tidyImplToDoc	libtidy/src/tidylib.c	/^TidyDoc      tidyImplToDoc( TidyDocImpl* impl )$/;"	f
tidyImplToNode	libtidy/src/tidylib.c	/^TidyNode     tidyImplToNode( Node* node )$/;"	f
tidyImplToOption	libtidy/src/tidylib.c	/^TidyOption   tidyImplToOption( const TidyOptionImpl* option )$/;"	f
tidyInitInputBuffer	libtidy/src/buffio.c	/^void TIDY_CALL tidyInitInputBuffer( TidyInputSource* inp, TidyBuffer* buf )$/;"	f
tidyInitOutputBuffer	libtidy/src/buffio.c	/^void TIDY_CALL tidyInitOutputBuffer( TidyOutputSink* outp, TidyBuffer* buf )$/;"	f
tidyInitSink	libtidy/src/streamio.c	/^Bool TIDY_CALL tidyInitSink( TidyOutputSink* sink,$/;"	f
tidyInitSource	libtidy/src/streamio.c	/^Bool TIDY_CALL tidyInitSource( TidyInputSource*  source,$/;"	f
tidyIsEOF	libtidy/src/streamio.c	/^Bool TIDY_CALL tidyIsEOF( TidyInputSource* source )$/;"	f
tidyLoadConfig	libtidy/src/tidylib.c	/^int TIDY_CALL     tidyLoadConfig( TidyDoc tdoc, ctmbstr cfgfil )$/;"	f
tidyLoadConfigEnc	libtidy/src/tidylib.c	/^int TIDY_CALL     tidyLoadConfigEnc( TidyDoc tdoc, ctmbstr cfgfil, ctmbstr charenc )$/;"	f
tidyNodeCMIsBlock	libtidy/src/tagask.c	/^Bool tidyNodeCMIsBlock( TidyNode tnod )$/;"	f
tidyNodeCMIsEmpty	libtidy/src/tagask.c	/^Bool tidyNodeCMIsEmpty( TidyNode tnod )$/;"	f
tidyNodeCMIsInline	libtidy/src/tagask.c	/^Bool tidyNodeCMIsInline( TidyNode tnod )$/;"	f
tidyNodeColumn	libtidy/src/tidylib.c	/^uint TIDY_CALL tidyNodeColumn( TidyNode tnod )$/;"	f
tidyNodeGetId	libtidy/src/tidylib.c	/^TidyTagId TIDY_CALL tidyNodeGetId(TidyNode tnod)$/;"	f
tidyNodeGetName	libtidy/src/tidylib.c	/^ctmbstr TIDY_CALL        tidyNodeGetName( TidyNode tnod )$/;"	f
tidyNodeGetText	libtidy/src/tidylib.c	/^Bool TIDY_CALL  tidyNodeGetText( TidyDoc tdoc, TidyNode tnod, TidyBuffer* outbuf )$/;"	f
tidyNodeGetType	libtidy/src/tidylib.c	/^TidyNodeType TIDY_CALL tidyNodeGetType( TidyNode tnod )$/;"	f
tidyNodeGetValue	libtidy/src/tidylib.c	/^Bool TIDY_CALL tidyNodeGetValue( TidyDoc tdoc, TidyNode tnod, TidyBuffer* buf )$/;"	f
tidyNodeHasText	libtidy/src/tidylib.c	/^Bool TIDY_CALL  tidyNodeHasText( TidyDoc tdoc, TidyNode tnod )$/;"	f
tidyNodeIsA	libtidy/src/tagask.c	/^Bool TIDY_CALL tidyNodeIsA( TidyNode tnod )$/;"	f
tidyNodeIsADDRESS	libtidy/src/tagask.c	/^Bool TIDY_CALL tidyNodeIsADDRESS( TidyNode tnod )$/;"	f
tidyNodeIsAPPLET	libtidy/src/tagask.c	/^Bool TIDY_CALL tidyNodeIsAPPLET( TidyNode tnod )$/;"	f
tidyNodeIsAREA	libtidy/src/tagask.c	/^Bool TIDY_CALL tidyNodeIsAREA( TidyNode tnod )$/;"	f
tidyNodeIsB	libtidy/src/tagask.c	/^Bool TIDY_CALL tidyNodeIsB( TidyNode tnod )$/;"	f
tidyNodeIsBASE	libtidy/src/tagask.c	/^Bool TIDY_CALL tidyNodeIsBASE( TidyNode tnod )$/;"	f
tidyNodeIsBASEFONT	libtidy/src/tagask.c	/^Bool TIDY_CALL tidyNodeIsBASEFONT( TidyNode tnod )$/;"	f
tidyNodeIsBIG	libtidy/src/tagask.c	/^Bool TIDY_CALL tidyNodeIsBIG( TidyNode tnod )$/;"	f
tidyNodeIsBLINK	libtidy/src/tagask.c	/^Bool TIDY_CALL tidyNodeIsBLINK( TidyNode tnod )$/;"	f
tidyNodeIsBLOCKQUOTE	libtidy/src/tagask.c	/^Bool TIDY_CALL tidyNodeIsBLOCKQUOTE( TidyNode tnod )$/;"	f
tidyNodeIsBODY	libtidy/src/tagask.c	/^Bool TIDY_CALL tidyNodeIsBODY( TidyNode tnod )$/;"	f
tidyNodeIsBR	libtidy/src/tagask.c	/^Bool TIDY_CALL tidyNodeIsBR( TidyNode tnod )$/;"	f
tidyNodeIsCAPTION	libtidy/src/tagask.c	/^Bool TIDY_CALL tidyNodeIsCAPTION( TidyNode tnod )$/;"	f
tidyNodeIsCENTER	libtidy/src/tagask.c	/^Bool TIDY_CALL tidyNodeIsCENTER( TidyNode tnod )$/;"	f
tidyNodeIsCOL	libtidy/src/tagask.c	/^Bool TIDY_CALL tidyNodeIsCOL( TidyNode tnod )$/;"	f
tidyNodeIsCOLGROUP	libtidy/src/tagask.c	/^Bool TIDY_CALL tidyNodeIsCOLGROUP( TidyNode tnod )$/;"	f
tidyNodeIsDD	libtidy/src/tagask.c	/^Bool TIDY_CALL tidyNodeIsDD( TidyNode tnod )$/;"	f
tidyNodeIsDIR	libtidy/src/tagask.c	/^Bool TIDY_CALL tidyNodeIsDIR( TidyNode tnod )$/;"	f
tidyNodeIsDIV	libtidy/src/tagask.c	/^Bool TIDY_CALL tidyNodeIsDIV( TidyNode tnod )$/;"	f
tidyNodeIsDL	libtidy/src/tagask.c	/^Bool TIDY_CALL tidyNodeIsDL( TidyNode tnod )$/;"	f
tidyNodeIsDT	libtidy/src/tagask.c	/^Bool TIDY_CALL tidyNodeIsDT( TidyNode tnod )$/;"	f
tidyNodeIsEM	libtidy/src/tagask.c	/^Bool TIDY_CALL tidyNodeIsEM( TidyNode tnod )$/;"	f
tidyNodeIsEMBED	libtidy/src/tagask.c	/^Bool TIDY_CALL tidyNodeIsEMBED( TidyNode tnod )$/;"	f
tidyNodeIsFONT	libtidy/src/tagask.c	/^Bool TIDY_CALL tidyNodeIsFONT( TidyNode tnod )$/;"	f
tidyNodeIsFORM	libtidy/src/tagask.c	/^Bool TIDY_CALL tidyNodeIsFORM( TidyNode tnod )$/;"	f
tidyNodeIsFRAME	libtidy/src/tagask.c	/^Bool TIDY_CALL tidyNodeIsFRAME( TidyNode tnod )$/;"	f
tidyNodeIsFRAMESET	libtidy/src/tagask.c	/^Bool TIDY_CALL tidyNodeIsFRAMESET( TidyNode tnod )$/;"	f
tidyNodeIsH1	libtidy/src/tagask.c	/^Bool TIDY_CALL tidyNodeIsH1( TidyNode tnod )$/;"	f
tidyNodeIsH2	libtidy/src/tagask.c	/^Bool TIDY_CALL tidyNodeIsH2( TidyNode tnod )$/;"	f
tidyNodeIsH3	libtidy/src/tagask.c	/^Bool TIDY_CALL tidyNodeIsH3( TidyNode tnod )$/;"	f
tidyNodeIsH4	libtidy/src/tagask.c	/^Bool TIDY_CALL tidyNodeIsH4( TidyNode tnod )$/;"	f
tidyNodeIsH5	libtidy/src/tagask.c	/^Bool TIDY_CALL tidyNodeIsH5( TidyNode tnod )$/;"	f
tidyNodeIsH6	libtidy/src/tagask.c	/^Bool TIDY_CALL tidyNodeIsH6( TidyNode tnod )$/;"	f
tidyNodeIsHEAD	libtidy/src/tagask.c	/^Bool TIDY_CALL tidyNodeIsHEAD( TidyNode tnod )$/;"	f
tidyNodeIsHR	libtidy/src/tagask.c	/^Bool TIDY_CALL tidyNodeIsHR( TidyNode tnod )$/;"	f
tidyNodeIsHTML	libtidy/src/tagask.c	/^Bool TIDY_CALL tidyNodeIsHTML( TidyNode tnod )$/;"	f
tidyNodeIsHeader	libtidy/src/tagask.c	/^Bool TIDY_CALL tidyNodeIsHeader( TidyNode tnod )$/;"	f
tidyNodeIsI	libtidy/src/tagask.c	/^Bool TIDY_CALL tidyNodeIsI( TidyNode tnod )$/;"	f
tidyNodeIsIFRAME	libtidy/src/tagask.c	/^Bool TIDY_CALL tidyNodeIsIFRAME( TidyNode tnod )$/;"	f
tidyNodeIsIMG	libtidy/src/tagask.c	/^Bool TIDY_CALL tidyNodeIsIMG( TidyNode tnod )$/;"	f
tidyNodeIsINPUT	libtidy/src/tagask.c	/^Bool TIDY_CALL tidyNodeIsINPUT( TidyNode tnod )$/;"	f
tidyNodeIsISINDEX	libtidy/src/tagask.c	/^Bool TIDY_CALL tidyNodeIsISINDEX( TidyNode tnod )$/;"	f
tidyNodeIsLABEL	libtidy/src/tagask.c	/^Bool TIDY_CALL tidyNodeIsLABEL( TidyNode tnod )$/;"	f
tidyNodeIsLAYER	libtidy/src/tagask.c	/^Bool TIDY_CALL tidyNodeIsLAYER( TidyNode tnod )$/;"	f
tidyNodeIsLI	libtidy/src/tagask.c	/^Bool TIDY_CALL tidyNodeIsLI( TidyNode tnod )$/;"	f
tidyNodeIsLINK	libtidy/src/tagask.c	/^Bool TIDY_CALL tidyNodeIsLINK( TidyNode tnod )$/;"	f
tidyNodeIsLISTING	libtidy/src/tagask.c	/^Bool TIDY_CALL tidyNodeIsLISTING( TidyNode tnod )$/;"	f
tidyNodeIsMAP	libtidy/src/tagask.c	/^Bool TIDY_CALL tidyNodeIsMAP( TidyNode tnod )$/;"	f
tidyNodeIsMARQUEE	libtidy/src/tagask.c	/^Bool TIDY_CALL tidyNodeIsMARQUEE( TidyNode tnod )$/;"	f
tidyNodeIsMENU	libtidy/src/tagask.c	/^Bool TIDY_CALL tidyNodeIsMENU( TidyNode tnod )$/;"	f
tidyNodeIsMETA	libtidy/src/tagask.c	/^Bool TIDY_CALL tidyNodeIsMETA( TidyNode tnod )$/;"	f
tidyNodeIsNOBR	libtidy/src/tagask.c	/^Bool TIDY_CALL tidyNodeIsNOBR( TidyNode tnod )$/;"	f
tidyNodeIsNOFRAMES	libtidy/src/tagask.c	/^Bool TIDY_CALL tidyNodeIsNOFRAMES( TidyNode tnod )$/;"	f
tidyNodeIsNOSCRIPT	libtidy/src/tagask.c	/^Bool TIDY_CALL tidyNodeIsNOSCRIPT( TidyNode tnod )$/;"	f
tidyNodeIsOBJECT	libtidy/src/tagask.c	/^Bool TIDY_CALL tidyNodeIsOBJECT( TidyNode tnod )$/;"	f
tidyNodeIsOL	libtidy/src/tagask.c	/^Bool TIDY_CALL tidyNodeIsOL( TidyNode tnod )$/;"	f
tidyNodeIsOPTGROUP	libtidy/src/tagask.c	/^Bool TIDY_CALL tidyNodeIsOPTGROUP( TidyNode tnod )$/;"	f
tidyNodeIsOPTION	libtidy/src/tagask.c	/^Bool TIDY_CALL tidyNodeIsOPTION( TidyNode tnod )$/;"	f
tidyNodeIsP	libtidy/src/tagask.c	/^Bool TIDY_CALL tidyNodeIsP( TidyNode tnod )$/;"	f
tidyNodeIsPARAM	libtidy/src/tagask.c	/^Bool TIDY_CALL tidyNodeIsPARAM( TidyNode tnod )$/;"	f
tidyNodeIsPRE	libtidy/src/tagask.c	/^Bool TIDY_CALL tidyNodeIsPRE( TidyNode tnod )$/;"	f
tidyNodeIsQ	libtidy/src/tagask.c	/^Bool TIDY_CALL tidyNodeIsQ( TidyNode tnod )$/;"	f
tidyNodeIsS	libtidy/src/tagask.c	/^Bool TIDY_CALL tidyNodeIsS( TidyNode tnod )$/;"	f
tidyNodeIsSCRIPT	libtidy/src/tagask.c	/^Bool TIDY_CALL tidyNodeIsSCRIPT( TidyNode tnod )$/;"	f
tidyNodeIsSELECT	libtidy/src/tagask.c	/^Bool TIDY_CALL tidyNodeIsSELECT( TidyNode tnod )$/;"	f
tidyNodeIsSMALL	libtidy/src/tagask.c	/^Bool TIDY_CALL tidyNodeIsSMALL( TidyNode tnod )$/;"	f
tidyNodeIsSPACER	libtidy/src/tagask.c	/^Bool TIDY_CALL tidyNodeIsSPACER( TidyNode tnod )$/;"	f
tidyNodeIsSPAN	libtidy/src/tagask.c	/^Bool TIDY_CALL tidyNodeIsSPAN( TidyNode tnod )$/;"	f
tidyNodeIsSTRIKE	libtidy/src/tagask.c	/^Bool TIDY_CALL tidyNodeIsSTRIKE( TidyNode tnod )$/;"	f
tidyNodeIsSTRONG	libtidy/src/tagask.c	/^Bool TIDY_CALL tidyNodeIsSTRONG( TidyNode tnod )$/;"	f
tidyNodeIsSTYLE	libtidy/src/tagask.c	/^Bool TIDY_CALL tidyNodeIsSTYLE( TidyNode tnod )$/;"	f
tidyNodeIsTABLE	libtidy/src/tagask.c	/^Bool TIDY_CALL tidyNodeIsTABLE( TidyNode tnod )$/;"	f
tidyNodeIsTD	libtidy/src/tagask.c	/^Bool TIDY_CALL tidyNodeIsTD( TidyNode tnod )$/;"	f
tidyNodeIsTEXTAREA	libtidy/src/tagask.c	/^Bool TIDY_CALL tidyNodeIsTEXTAREA( TidyNode tnod )$/;"	f
tidyNodeIsTH	libtidy/src/tagask.c	/^Bool TIDY_CALL tidyNodeIsTH( TidyNode tnod )$/;"	f
tidyNodeIsTITLE	libtidy/src/tagask.c	/^Bool TIDY_CALL tidyNodeIsTITLE( TidyNode tnod )$/;"	f
tidyNodeIsTR	libtidy/src/tagask.c	/^Bool TIDY_CALL tidyNodeIsTR( TidyNode tnod )$/;"	f
tidyNodeIsText	libtidy/src/tagask.c	/^Bool TIDY_CALL tidyNodeIsText( TidyNode tnod )$/;"	f
tidyNodeIsU	libtidy/src/tagask.c	/^Bool TIDY_CALL tidyNodeIsU( TidyNode tnod )$/;"	f
tidyNodeIsUL	libtidy/src/tagask.c	/^Bool TIDY_CALL tidyNodeIsUL( TidyNode tnod )$/;"	f
tidyNodeIsWBR	libtidy/src/tagask.c	/^Bool TIDY_CALL tidyNodeIsWBR( TidyNode tnod )$/;"	f
tidyNodeIsXMP	libtidy/src/tagask.c	/^Bool TIDY_CALL tidyNodeIsXMP( TidyNode tnod )$/;"	f
tidyNodeLine	libtidy/src/tidylib.c	/^uint TIDY_CALL tidyNodeLine( TidyNode tnod )$/;"	f
tidyNodeToImpl	libtidy/src/tidylib.c	/^Node*        tidyNodeToImpl( TidyNode tnod )$/;"	f
tidyOptCopyConfig	libtidy/src/tidylib.c	/^Bool TIDY_CALL tidyOptCopyConfig( TidyDoc to, TidyDoc from )$/;"	f
tidyOptDiffThanDefault	libtidy/src/tidylib.c	/^Bool TIDY_CALL tidyOptDiffThanDefault( TidyDoc tdoc )$/;"	f
tidyOptDiffThanSnapshot	libtidy/src/tidylib.c	/^Bool TIDY_CALL          tidyOptDiffThanSnapshot( TidyDoc tdoc )$/;"	f
tidyOptGetBool	libtidy/src/tidylib.c	/^Bool TIDY_CALL         tidyOptGetBool( TidyDoc tdoc, TidyOptionId optId )$/;"	f
tidyOptGetCategory	libtidy/src/tidylib.c	/^TidyConfigCategory TIDY_CALL tidyOptGetCategory( TidyOption topt )$/;"	f
tidyOptGetCurrPick	libtidy/src/tidylib.c	/^ctmbstr TIDY_CALL       tidyOptGetCurrPick( TidyDoc tdoc, TidyOptionId optId )$/;"	f
tidyOptGetDeclTagList	libtidy/src/tidylib.c	/^TidyIterator TIDY_CALL tidyOptGetDeclTagList( TidyDoc tdoc )$/;"	f
tidyOptGetDefault	libtidy/src/tidylib.c	/^ctmbstr TIDY_CALL       tidyOptGetDefault( TidyOption topt )$/;"	f
tidyOptGetDefaultBool	libtidy/src/tidylib.c	/^Bool TIDY_CALL          tidyOptGetDefaultBool( TidyOption topt )$/;"	f
tidyOptGetDefaultInt	libtidy/src/tidylib.c	/^ulong TIDY_CALL          tidyOptGetDefaultInt( TidyOption topt )$/;"	f
tidyOptGetEncName	libtidy/src/tidylib.c	/^ctmbstr TIDY_CALL       tidyOptGetEncName( TidyDoc tdoc, TidyOptionId optId )$/;"	f
tidyOptGetId	libtidy/src/tidylib.c	/^TidyOptionId TIDY_CALL  tidyOptGetId( TidyOption topt )$/;"	f
tidyOptGetIdForName	libtidy/src/tidylib.c	/^TidyOptionId TIDY_CALL tidyOptGetIdForName( ctmbstr optnam )$/;"	f
tidyOptGetInt	libtidy/src/tidylib.c	/^ulong TIDY_CALL        tidyOptGetInt( TidyDoc tdoc, TidyOptionId optId )$/;"	f
tidyOptGetName	libtidy/src/tidylib.c	/^ctmbstr TIDY_CALL       tidyOptGetName( TidyOption topt )$/;"	f
tidyOptGetNextDeclTag	libtidy/src/tidylib.c	/^ctmbstr TIDY_CALL       tidyOptGetNextDeclTag( TidyDoc tdoc, TidyOptionId optId,$/;"	f
tidyOptGetNextDocLinks	libtidy/src/tidylib.c	/^TidyOption TIDY_CALL tidyOptGetNextDocLinks( TidyDoc tdoc, TidyIterator* pos )$/;"	f
tidyOptGetNextPick	libtidy/src/tidylib.c	/^ctmbstr TIDY_CALL       tidyOptGetNextPick( TidyOption topt, TidyIterator* pos )$/;"	f
tidyOptGetPickList	libtidy/src/tidylib.c	/^TidyIterator TIDY_CALL  tidyOptGetPickList( TidyOption topt )$/;"	f
tidyOptGetType	libtidy/src/tidylib.c	/^TidyOptionType TIDY_CALL tidyOptGetType( TidyOption topt )$/;"	f
tidyOptGetValue	libtidy/src/tidylib.c	/^ctmbstr TIDY_CALL       tidyOptGetValue( TidyDoc tdoc, TidyOptionId optId )$/;"	f
tidyOptIsReadOnly	libtidy/src/tidylib.c	/^Bool TIDY_CALL          tidyOptIsReadOnly( TidyOption topt )$/;"	f
tidyOptName	libtidy/src/streamio.c	/^    ctmbstr tidyOptName;$/;"	m	struct:_enc2iana	file:
tidyOptParseValue	libtidy/src/tidylib.c	/^Bool TIDY_CALL        tidyOptParseValue( TidyDoc tdoc, ctmbstr optnam, ctmbstr val )$/;"	f
tidyOptResetAllToDefault	libtidy/src/tidylib.c	/^Bool TIDY_CALL tidyOptResetAllToDefault( TidyDoc tdoc )$/;"	f
tidyOptResetToDefault	libtidy/src/tidylib.c	/^Bool TIDY_CALL tidyOptResetToDefault( TidyDoc tdoc, TidyOptionId optId )$/;"	f
tidyOptResetToSnapshot	libtidy/src/tidylib.c	/^Bool TIDY_CALL tidyOptResetToSnapshot( TidyDoc tdoc )$/;"	f
tidyOptSaveFile	libtidy/src/tidylib.c	/^int TIDY_CALL tidyOptSaveFile( TidyDoc tdoc, ctmbstr cfgfil )$/;"	f
tidyOptSaveSink	libtidy/src/tidylib.c	/^int TIDY_CALL tidyOptSaveSink( TidyDoc tdoc, TidyOutputSink* sink )$/;"	f
tidyOptSetBool	libtidy/src/tidylib.c	/^Bool TIDY_CALL        tidyOptSetBool( TidyDoc tdoc, TidyOptionId optId, Bool val )$/;"	f
tidyOptSetInt	libtidy/src/tidylib.c	/^Bool TIDY_CALL        tidyOptSetInt( TidyDoc tdoc, TidyOptionId optId, ulong val )$/;"	f
tidyOptSetValue	libtidy/src/tidylib.c	/^Bool TIDY_CALL        tidyOptSetValue( TidyDoc tdoc, TidyOptionId optId, ctmbstr val )$/;"	f
tidyOptSnapshot	libtidy/src/tidylib.c	/^Bool TIDY_CALL tidyOptSnapshot( TidyDoc tdoc )$/;"	f
tidyOptionToImpl	libtidy/src/tidylib.c	/^const TidyOptionImpl* tidyOptionToImpl( TidyOption topt )$/;"	f
tidyParseBuffer	libtidy/src/tidylib.c	/^int TIDY_CALL  tidyParseBuffer( TidyDoc tdoc, TidyBuffer* inbuf )$/;"	f
tidyParseFile	libtidy/src/tidylib.c	/^int TIDY_CALL  tidyParseFile( TidyDoc tdoc, ctmbstr filnam )$/;"	f
tidyParseSource	libtidy/src/tidylib.c	/^int TIDY_CALL  tidyParseSource( TidyDoc tdoc, TidyInputSource* source )$/;"	f
tidyParseStdin	libtidy/src/tidylib.c	/^int TIDY_CALL  tidyParseStdin( TidyDoc tdoc )$/;"	f
tidyParseString	libtidy/src/tidylib.c	/^int TIDY_CALL  tidyParseString( TidyDoc tdoc, ctmbstr content )$/;"	f
tidyPutByte	libtidy/src/streamio.c	/^void TIDY_CALL tidyPutByte( TidyOutputSink* sink, uint ch )$/;"	f
tidyRelease	libtidy/src/tidylib.c	/^void TIDY_CALL          tidyRelease( TidyDoc tdoc )$/;"	f
tidyReleaseDate	libtidy/src/tidylib.c	/^ctmbstr TIDY_CALL     tidyReleaseDate(void)$/;"	f
tidyRunDiagnostics	libtidy/src/tidylib.c	/^int TIDY_CALL        tidyRunDiagnostics( TidyDoc tdoc )$/;"	f
tidySaveBuffer	libtidy/src/tidylib.c	/^int TIDY_CALL        tidySaveBuffer( TidyDoc tdoc, TidyBuffer* outbuf )$/;"	f
tidySaveFile	libtidy/src/tidylib.c	/^int TIDY_CALL        tidySaveFile( TidyDoc tdoc, ctmbstr filnam )$/;"	f
tidySaveSink	libtidy/src/tidylib.c	/^int TIDY_CALL        tidySaveSink( TidyDoc tdoc, TidyOutputSink* sink )$/;"	f
tidySaveStdout	libtidy/src/tidylib.c	/^int TIDY_CALL        tidySaveStdout( TidyDoc tdoc )$/;"	f
tidySaveString	libtidy/src/tidylib.c	/^int TIDY_CALL        tidySaveString( TidyDoc tdoc, tmbstr buffer, uint* buflen )$/;"	f
tidySetAppData	libtidy/src/tidylib.c	/^void TIDY_CALL        tidySetAppData( TidyDoc tdoc, void* appData )$/;"	f
tidySetCharEncoding	libtidy/src/tidylib.c	/^int TIDY_CALL         tidySetCharEncoding( TidyDoc tdoc, ctmbstr encnam )$/;"	f
tidySetErrorBuffer	libtidy/src/tidylib.c	/^int TIDY_CALL    tidySetErrorBuffer( TidyDoc tdoc, TidyBuffer* errbuf )$/;"	f
tidySetErrorFile	libtidy/src/tidylib.c	/^FILE* TIDY_CALL   tidySetErrorFile( TidyDoc tdoc, ctmbstr errfilnam )$/;"	f
tidySetErrorSink	libtidy/src/tidylib.c	/^int TIDY_CALL    tidySetErrorSink( TidyDoc tdoc, TidyOutputSink* sink )$/;"	f
tidySetFreeCall	libtidy/src/alloc.c	/^Bool TIDY_CALL tidySetFreeCall( TidyFree ffree )$/;"	f
tidySetInCharEncoding	libtidy/src/tidylib.c	/^int TIDY_CALL           tidySetInCharEncoding( TidyDoc tdoc, ctmbstr encnam )$/;"	f
tidySetMallocCall	libtidy/src/alloc.c	/^Bool TIDY_CALL tidySetMallocCall( TidyMalloc fmalloc )$/;"	f
tidySetOptionCallback	libtidy/src/tidylib.c	/^Bool TIDY_CALL        tidySetOptionCallback( TidyDoc tdoc, TidyOptCallback pOptCallback )$/;"	f
tidySetOutCharEncoding	libtidy/src/tidylib.c	/^int TIDY_CALL           tidySetOutCharEncoding( TidyDoc tdoc, ctmbstr encnam )$/;"	f
tidySetPanicCall	libtidy/src/alloc.c	/^Bool TIDY_CALL tidySetPanicCall( TidyPanic fpanic )$/;"	f
tidySetReallocCall	libtidy/src/alloc.c	/^Bool TIDY_CALL tidySetReallocCall( TidyRealloc frealloc )$/;"	f
tidySetReportFilter	libtidy/src/tidylib.c	/^Bool TIDY_CALL        tidySetReportFilter( TidyDoc tdoc, TidyReportFilter filt )$/;"	f
tidyStatus	libtidy/src/tidylib.c	/^int TIDY_CALL        tidyStatus( TidyDoc tdoc )$/;"	f
tidyUngetByte	libtidy/src/streamio.c	/^void TIDY_CALL tidyUngetByte( TidyInputSource* source, uint ch )$/;"	f
tidyWarningCount	libtidy/src/tidylib.c	/^uint TIDY_CALL       tidyWarningCount( TidyDoc tdoc )$/;"	f
tidy_out	libtidy/src/localize.c	/^void tidy_out( TidyDocImpl* doc, ctmbstr msg, ... )$/;"	f
tmbsnprintf	libtidy/src/tmbstr.c	/^int TY_(tmbsnprintf)(tmbstr buffer, size_t count, ctmbstr format, ...)$/;"	f
tmbstrcasecmp	libtidy/src/tmbstr.c	/^int TY_(tmbstrcasecmp)( ctmbstr s1, ctmbstr s2 )$/;"	f
tmbstrcat	libtidy/src/tmbstr.c	/^uint TY_(tmbstrcat)( tmbstr s1, ctmbstr s2 )$/;"	f
tmbstrcmp	libtidy/src/tmbstr.c	/^int TY_(tmbstrcmp)( ctmbstr s1, ctmbstr s2 )$/;"	f
tmbstrcpy	libtidy/src/tmbstr.c	/^uint TY_(tmbstrcpy)( tmbstr s1, ctmbstr s2 )$/;"	f
tmbstrdup	libtidy/src/tmbstr.c	/^tmbstr TY_(tmbstrdup)( TidyAllocator *allocator, ctmbstr str )$/;"	f
tmbstrlen	libtidy/src/tmbstr.c	/^uint TY_(tmbstrlen)( ctmbstr str )$/;"	f
tmbstrncasecmp	libtidy/src/tmbstr.c	/^int TY_(tmbstrncasecmp)( ctmbstr s1, ctmbstr s2, uint n )$/;"	f
tmbstrncmp	libtidy/src/tmbstr.c	/^int TY_(tmbstrncmp)( ctmbstr s1, ctmbstr s2, uint n )$/;"	f
tmbstrncpy	libtidy/src/tmbstr.c	/^uint TY_(tmbstrncpy)( tmbstr s1, ctmbstr s2, uint size )$/;"	f
tmbstrndup	libtidy/src/tmbstr.c	/^tmbstr TY_(tmbstrndup)( TidyAllocator *allocator, ctmbstr str, uint len )$/;"	f
tmbstrtolower	libtidy/src/tmbstr.c	/^tmbstr TY_(tmbstrtolower)( tmbstr s )$/;"	f
tmbstrtoupper	libtidy/src/tmbstr.c	/^tmbstr TY_(tmbstrtoupper)(tmbstr s)$/;"	f
tmbsubstr	libtidy/src/tmbstr.c	/^ctmbstr TY_(tmbsubstr)( ctmbstr s1, ctmbstr s2 )$/;"	f
tmbsubstrn	libtidy/src/tmbstr.c	/^ctmbstr TY_(tmbsubstrn)( ctmbstr s1, uint len1, ctmbstr s2 )$/;"	f
tmbvsnprintf	libtidy/src/tmbstr.c	/^int TY_(tmbvsnprintf)(tmbstr buffer, size_t count, ctmbstr format, va_list args)$/;"	f
topt	libtidy/console/tidy.c	/^    TidyOption topt[N_TIDY_OPTIONS];$/;"	m	struct:__anon9	file:
topt	libtidy/console/tidy.c	/^void printOption( TidyDoc ARG_UNUSED(tdoc), TidyOption topt,$/;"	v	file:
topt	libtidy/console/tidy.c	/^void printOptionValues( TidyDoc ARG_UNUSED(tdoc), TidyOption topt,$/;"	v	file:
true	libtidy/console/tab2space.c	7;"	d	file:
type	lib/HTML/Tidy/Message.pm	/^sub type    { my $self = shift; return $self->{_type} }$/;"	s
type	libtidy/console/tidy.c	/^    ctmbstr type;  \/**< "String, ... *\/$/;"	m	struct:__anon8	file:
ul	libtidy/console/tidy.c	/^static const char ul[]$/;"	v	file:
unget	libtidy/src/fileio.c	/^    TidyBuffer   unget;$/;"	m	struct:_fp_input_source	file:
unicode4cat	libtidy/src/pprint.c	/^} const unicode4cat[] =$/;"	v	file:
unknownOption	libtidy/console/tidy.c	/^static void unknownOption( uint c )$/;"	f	file:
urlMatch	libtidy/src/access.c	/^static Bool urlMatch( ctmbstr url1, ctmbstr url2 )$/;"	f	file:
valfmt	libtidy/console/tidy.c	/^static const char valfmt[] = "%-27.27s %-9.9s %-1.1s%-39.39s\\n";$/;"	v	file:
validBytes	libtidy/src/utf8.c	/^     byte validBytes[8];$/;"	m	struct:validUTF8Sequence	file:
validUTF8	libtidy/src/utf8.c	/^} validUTF8[kNumUTF8Sequences] =$/;"	v	typeref:struct:validUTF8Sequence	file:
validUTF8Sequence	libtidy/src/utf8.c	/^static const struct validUTF8Sequence$/;"	s	file:
valloc	libtidy/src/config.c	45;"	d	file:
vals	libtidy/console/tidy.c	/^    ctmbstr vals;  \/**< Potential values. If NULL, use an external function *\/$/;"	m	struct:__anon8	file:
vers	libtidy/src/lexer.c	/^    uint vers;$/;"	m	struct:_doctypes	file:
version	libtidy/console/tidy.c	/^static void version( void )$/;"	f	file:
versions	libtidy/src/entities.c	/^    uint    versions;$/;"	m	struct:_entity	file:
view	libtidy/src/mappedio.c	/^    byte *view, *iter, *end;$/;"	m	struct:_fp_input_mapped_source	file:
where	lib/HTML/Tidy/Message.pm	/^sub where {$/;"	s
wincp	libtidy/src/win32tc.c	/^    uint wincp;$/;"	m	struct:_nameWinCPMap	file:
xml_help	libtidy/console/tidy.c	/^static void xml_help( void )$/;"	f	file:
